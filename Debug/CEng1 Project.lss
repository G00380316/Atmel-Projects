
CEng1 Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  000011da  0000126e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800342  00800342  000014b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cc6  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7f  00000000  00000000  000043c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cb  00000000  00000000  00005345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00006710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  000069f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fac  00000000  00000000  000072d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00009282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ed       	ldi	r30, 0xDA	; 218
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 34       	cpi	r26, 0x42	; 66
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e4       	ldi	r26, 0x42	; 66
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 34       	cpi	r26, 0x48	; 72
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 56 00 	call	0xac	; 0xac <main>
      9e:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      a6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <system_init>
      aa:	08 95       	ret

000000ac <main>:
#define Exit_BUTTON 3
#define Ext_RED_LED 2
#define usercontrol_button 4

int main(void)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	cd b7       	in	r28, 0x3d	; 61
      b2:	de b7       	in	r29, 0x3e	; 62
      b4:	29 97       	sbiw	r28, 0x09	; 9
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
	uint8_t x, password[size] = {10,0,10,4}, userInput[size], count = 0, y , loop = 0,full = 0,select = 0,open=1;
      c0:	8a e0       	ldi	r24, 0x0A	; 10
      c2:	89 83       	std	Y+1, r24	; 0x01
      c4:	1a 82       	std	Y+2, r1	; 0x02
      c6:	8b 83       	std	Y+3, r24	; 0x03
      c8:	84 e0       	ldi	r24, 0x04	; 4
      ca:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t takenspace = 0,ms=0;
	char buffer[5] = "";
      cc:	1e 82       	std	Y+6, r1	; 0x06
      ce:	1d 82       	std	Y+5, r1	; 0x05
      d0:	fe 01       	movw	r30, r28
      d2:	37 96       	adiw	r30, 0x07	; 7
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	df 01       	movw	r26, r30
      d8:	1d 92       	st	X+, r1
      da:	8a 95       	dec	r24
      dc:	e9 f7       	brne	.-6      	; 0xd8 <main+0x2c>
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      de:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
	lcd_init(LCD_DISP_ON_CURSOR);
      e2:	8e e0       	ldi	r24, 0x0E	; 14
      e4:	0e 94 6f 04 	call	0x8de	; 0x8de <lcd_init>
	keypadConfigure();
      e8:	0e 94 33 03 	call	0x666	; 0x666 <keypadConfigure>
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
      ec:	24 9a       	sbi	0x04, 4	; 4
      ee:	26 9a       	sbi	0x04, 6	; 4
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
      f0:	52 9a       	sbi	0x0a, 2	; 10
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
      f2:	2e 98       	cbi	0x05, 6	; 5
      f4:	2c 98       	cbi	0x05, 4	; 5
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
      f6:	5a 98       	cbi	0x0b, 2	; 11
      f8:	03 e0       	ldi	r16, 0x03	; 3
      fa:	10 e0       	ldi	r17, 0x00	; 0
	PORTB_set_pin_level(GREEN_LED,0);
	PORTD_set_pin_level(Ext_RED_LED,0);
    //informs user that car park system its getting prepared and sets the servo motors to its orginal position
	for (int i = 0; i < 3; i++)
	{
		lcd_puts("Car park\nSystem booting");
      fc:	82 e1       	ldi	r24, 0x12	; 18
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	bf ef       	ldi	r27, 0xFF	; 255
     106:	e3 ed       	ldi	r30, 0xD3	; 211
     108:	f0 e3       	ldi	r31, 0x30	; 48
     10a:	b1 50       	subi	r27, 0x01	; 1
     10c:	e0 40       	sbci	r30, 0x00	; 0
     10e:	f0 40       	sbci	r31, 0x00	; 0
     110:	e1 f7       	brne	.-8      	; 0x10a <main+0x5e>
     112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x68>
     114:	00 00       	nop
		_delay_ms(1000);
		lcd_clrscr();
     116:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
     11a:	8f e0       	ldi	r24, 0x0F	; 15
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     11c:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11e:	af e8       	ldi	r26, 0x8F	; 143
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	11 97       	sbiw	r26, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <main+0x76>
     126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x7c>
     128:	00 00       	nop
     12a:	81 50       	subi	r24, 0x01	; 1
		  for (x=0; x<15;x++)
     12c:	b9 f7       	brne	.-18     	; 0x11c <main+0x70>
     12e:	89 eb       	ldi	r24, 0xB9	; 185
	} else {
		PORTB &= ~(1 << pin);
     130:	2d 98       	cbi	0x05, 5	; 5
     132:	ef e8       	ldi	r30, 0x8F	; 143
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	31 97       	sbiw	r30, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <main+0x8a>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x90>
     13c:	00 00       	nop
     13e:	81 50       	subi	r24, 0x01	; 1
		  {
			  PORTB_set_pin_level(ENTRY,1);
			  _delay_us(100);
		  }
		  for (x=0; x<185;x++)
     140:	b9 f7       	brne	.-18     	; 0x130 <main+0x84>
     142:	8f e0       	ldi	r24, 0x0F	; 15
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     144:	2b 9a       	sbi	0x05, 3	; 5
     146:	af e8       	ldi	r26, 0x8F	; 143
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	11 97       	sbiw	r26, 0x01	; 1
     14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x9e>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xa4>
     150:	00 00       	nop
     152:	81 50       	subi	r24, 0x01	; 1
		  {
			  PORTB_set_pin_level(ENTRY,0);
			  _delay_us(100);
		  }
		for (x=0; x<15;x++)
     154:	b9 f7       	brne	.-18     	; 0x144 <main+0x98>
     156:	89 eb       	ldi	r24, 0xB9	; 185
	} else {
		PORTB &= ~(1 << pin);
     158:	2b 98       	cbi	0x05, 3	; 5
     15a:	ef e8       	ldi	r30, 0x8F	; 143
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	31 97       	sbiw	r30, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <main+0xb2>
     162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xb8>
     164:	00 00       	nop
     166:	81 50       	subi	r24, 0x01	; 1
		{
			PORTB_set_pin_level(EXIT,1);
			_delay_us(100);
		}
		for (x=0; x<185;x++)
     168:	b9 f7       	brne	.-18     	; 0x158 <main+0xac>
     16a:	01 50       	subi	r16, 0x01	; 1
     16c:	11 09       	sbc	r17, r1
	PORTD_set_pin_dir(Ext_RED_LED,PORT_DIR_OUT);
	PORTB_set_pin_level(Red_LED,0);
	PORTB_set_pin_level(GREEN_LED,0);
	PORTD_set_pin_level(Ext_RED_LED,0);
    //informs user that car park system its getting prepared and sets the servo motors to its orginal position
	for (int i = 0; i < 3; i++)
     16e:	09 f0       	breq	.+2      	; 0x172 <main+0xc6>
     170:	c5 cf       	rjmp	.-118    	; 0xfc <main+0x50>
		{
			PORTB_set_pin_level(EXIT,0);
			_delay_us(100);
		}
	}
	printf("Enter 4-digit PIN to start and then press the control button when menu has loaded to begin operating Car Park gates\n");
     172:	8a e2       	ldi	r24, 0x2A	; 42
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
     17a:	6e 01       	movw	r12, r28
     17c:	f5 e0       	ldi	r31, 0x05	; 5
     17e:	cf 0e       	add	r12, r31
     180:	d1 1c       	adc	r13, r1
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	PINB = 1 << pin;
     182:	10 e1       	ldi	r17, 0x10	; 16
     184:	60 c0       	rjmp	.+192    	; 0x246 <main+0x19a>
	while(loop == 0)
	{
		count=0;
		for (x=0;x<size; x++)
		{
			userInput[x]= keypadScan();
     186:	0e 94 3f 03 	call	0x67e	; 0x67e <keypadScan>
     18a:	b8 2e       	mov	r11, r24
			printf("*");
     18c:	8a e2       	ldi	r24, 0x2A	; 42
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 79 05 	call	0xaf2	; 0xaf2 <putchar>
			if (password[x] == userInput[x])
     194:	d7 01       	movw	r26, r14
     196:	8d 91       	ld	r24, X+
     198:	7d 01       	movw	r14, r26
     19a:	b8 12       	cpse	r11, r24
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <main+0xf4>
			{
				count++;
     19e:	0f 5f       	subi	r16, 0xFF	; 255
	printf("Enter 4-digit PIN to start and then press the control button when menu has loaded to begin operating Car Park gates\n");
    //read 4-digit pin
	while(loop == 0)
	{
		count=0;
		for (x=0;x<size; x++)
     1a0:	ec 14       	cp	r14, r12
     1a2:	fd 04       	cpc	r15, r13
     1a4:	81 f7       	brne	.-32     	; 0x186 <main+0xda>
			if (password[x] == userInput[x])
			{
				count++;
			}
		}
		if (count == size){
     1a6:	04 30       	cpi	r16, 0x04	; 4
     1a8:	11 f5       	brne	.+68     	; 0x1ee <main+0x142>
			printf("\n\nMenu loading...");
     1aa:	8e e9       	ldi	r24, 0x9E	; 158
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
			lcd_puts("Car park\nSystem booted");
     1b6:	80 eb       	ldi	r24, 0xB0	; 176
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	bf ef       	ldi	r27, 0xFF	; 255
     1c0:	e7 ea       	ldi	r30, 0xA7	; 167
     1c2:	f1 e6       	ldi	r31, 0x61	; 97
     1c4:	b1 50       	subi	r27, 0x01	; 1
     1c6:	e0 40       	sbci	r30, 0x00	; 0
     1c8:	f0 40       	sbci	r31, 0x00	; 0
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x118>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x122>
     1ce:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     1d0:	2c 9a       	sbi	0x05, 4	; 5
			_delay_ms(2000);
			PORTB_set_pin_level(GREEN_LED,1);
			printf("Menu loaded");
     1d2:	87 ec       	ldi	r24, 0xC7	; 199
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	9f 93       	push	r25
     1d8:	8f 93       	push	r24
     1da:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(1);
			ms++;
		}
		while(PORTC_get_pin_level(usercontrol_button)==0)
		{
			loop=3;
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	40 c0       	rjmp	.+128    	; 0x26e <main+0x1c2>
			PORTB_set_pin_level(GREEN_LED,1);
			printf("Menu loaded");
			loop = 2;
		}
		else{
			printf("\n\nIncorrect, try again after system light has flashed green\n");
     1ee:	83 ed       	ldi	r24, 0xD3	; 211
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	PINB = 1 << pin;
     1f6:	13 b9       	out	0x03, r17	; 3
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	89 e6       	ldi	r24, 0x69	; 105
     1fc:	98 e1       	ldi	r25, 0x18	; 24
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x152>
     206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x15c>
     208:	00 00       	nop
     20a:	13 b9       	out	0x03, r17	; 3
     20c:	af ef       	ldi	r26, 0xFF	; 255
     20e:	b9 e6       	ldi	r27, 0x69	; 105
     210:	e8 e1       	ldi	r30, 0x18	; 24
     212:	a1 50       	subi	r26, 0x01	; 1
     214:	b0 40       	sbci	r27, 0x00	; 0
     216:	e0 40       	sbci	r30, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <main+0x166>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x170>
     21c:	00 00       	nop
     21e:	13 b9       	out	0x03, r17	; 3
     220:	ff ef       	ldi	r31, 0xFF	; 255
     222:	29 e6       	ldi	r18, 0x69	; 105
     224:	88 e1       	ldi	r24, 0x18	; 24
     226:	f1 50       	subi	r31, 0x01	; 1
     228:	20 40       	sbci	r18, 0x00	; 0
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x17a>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x184>
     230:	00 00       	nop
     232:	13 b9       	out	0x03, r17	; 3
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	a9 e6       	ldi	r26, 0x69	; 105
     238:	b8 e1       	ldi	r27, 0x18	; 24
     23a:	91 50       	subi	r25, 0x01	; 1
     23c:	a0 40       	sbci	r26, 0x00	; 0
     23e:	b0 40       	sbci	r27, 0x00	; 0
     240:	e1 f7       	brne	.-8      	; 0x23a <main+0x18e>
     242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x198>
     244:	00 00       	nop
     246:	fe 01       	movw	r30, r28
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	7f 01       	movw	r14, r30
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	9b cf       	rjmp	.-202    	; 0x186 <main+0xda>
     250:	af e9       	ldi	r26, 0x9F	; 159
     252:	bf e0       	ldi	r27, 0x0F	; 15
     254:	11 97       	sbiw	r26, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <main+0x1a8>
     258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1ae>
     25a:	00 00       	nop
	while(loop==2)
	{
		while(PORTC_get_pin_level(usercontrol_button)==1)
		{
			_delay_ms(1);
			ms++;
     25c:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
	//while the control button isn't pressed ms is being incremented to create an affect such as a micro-controller with clock functionality to get a random number
	while(loop==2)
	{
		while(PORTC_get_pin_level(usercontrol_button)==1)
     25e:	34 99       	sbic	0x06, 4	; 6
     260:	f7 cf       	rjmp	.-18     	; 0x250 <main+0x1a4>
     262:	01 c0       	rjmp	.+2      	; 0x266 <main+0x1ba>
			_delay_ms(1);
			ms++;
		}
		while(PORTC_get_pin_level(usercontrol_button)==0)
		{
			loop=3;
     264:	89 2f       	mov	r24, r25
		while(PORTC_get_pin_level(usercontrol_button)==1)
		{
			_delay_ms(1);
			ms++;
		}
		while(PORTC_get_pin_level(usercontrol_button)==0)
     266:	34 9b       	sbis	0x06, 4	; 6
     268:	fd cf       	rjmp	.-6      	; 0x264 <main+0x1b8>
			}
			
		}
	}
	//while the control button isn't pressed ms is being incremented to create an affect such as a micro-controller with clock functionality to get a random number
	while(loop==2)
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	19 f4       	brne	.+6      	; 0x274 <main+0x1c8>
	{
		while(PORTC_get_pin_level(usercontrol_button)==1)
     26e:	34 99       	sbic	0x06, 4	; 6
     270:	ef cf       	rjmp	.-34     	; 0x250 <main+0x1a4>
     272:	f9 cf       	rjmp	.-14     	; 0x266 <main+0x1ba>
		while(PORTC_get_pin_level(usercontrol_button)==0)
		{
			loop=3;
		}
	}
	lcd_clrscr();
     274:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
	//prints out random number for the space taken
	srand(ms);
     278:	81 2f       	mov	r24, r17
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 33 05 	call	0xa66	; 0xa66 <srand>
     280:	14 e6       	ldi	r17, 0x64	; 100
	for(y=0;y<100;y++)
	{
		takenspace = rand()%50;	
     282:	0e 94 2e 05 	call	0xa5c	; 0xa5c <rand>
     286:	11 50       	subi	r17, 0x01	; 1
		}
	}
	lcd_clrscr();
	//prints out random number for the space taken
	srand(ms);
	for(y=0;y<100;y++)
     288:	e1 f7       	brne	.-8      	; 0x282 <main+0x1d6>
	{
		takenspace = rand()%50;	
     28a:	62 e3       	ldi	r22, 0x32	; 50
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	0e 94 ba 04 	call	0x974	; 0x974 <__divmodhi4>
     292:	f8 2e       	mov	r15, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     294:	4a e0       	ldi	r20, 0x0A	; 10
     296:	be 01       	movw	r22, r28
     298:	6b 5f       	subi	r22, 0xFB	; 251
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__itoa_ncheck>
	}
	itoa(takenspace, buffer, 10);//converts int to string so it can be read by LCD
	lcd_puts("Spaces taken: ");
     2a2:	8f e0       	ldi	r24, 0x0F	; 15
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	lcd_puts(buffer);
     2aa:	ce 01       	movw	r24, r28
     2ac:	05 96       	adiw	r24, 0x05	; 5
     2ae:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	lcd_puts("\nMax Spaces: 50");
     2b2:	8e e1       	ldi	r24, 0x1E	; 30
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
#define Ext_RED_LED 2
#define usercontrol_button 4

int main(void)
{
	uint8_t x, password[size] = {10,0,10,4}, userInput[size], count = 0, y , loop = 0,full = 0,select = 0,open=1;
     2ba:	33 24       	eor	r3, r3
     2bc:	33 94       	inc	r3
     2be:	41 2c       	mov	r4, r1
		    }
			switch(select)
			{
			case 0://if user entered a 0 it is actually option 1 due to keypad layout opens exit gate
			select=1;
			printf("\nNumber entered %d",select);
     2c0:	ee 24       	eor	r14, r14
     2c2:	e3 94       	inc	r14
     2c4:	04 ed       	ldi	r16, 0xD4	; 212
     2c6:	12 e0       	ldi	r17, 0x02	; 2
			{
				PORTB_set_pin_level(EXIT,0);
				_delay_us(100);
			}
			_delay_ms(1000);
			open=0;
     2c8:	71 2c       	mov	r7, r1
			}
			loop=0;
			break;
			case 2://if user entered a 3 it is actually option 2 due to keypad layout allows user to enter desired space taken
			select=3;
			printf("\nNumber entered %d",select);
     2ca:	0f 2e       	mov	r0, r31
     2cc:	f3 e0       	ldi	r31, 0x03	; 3
     2ce:	5f 2e       	mov	r5, r31
     2d0:	f0 2d       	mov	r31, r0
			printf("\nEnter Value(in Send Value)of space taken: ");
     2d2:	0f 2e       	mov	r0, r31
     2d4:	f7 ee       	ldi	r31, 0xE7	; 231
     2d6:	af 2e       	mov	r10, r31
     2d8:	f2 e0       	ldi	r31, 0x02	; 2
     2da:	bf 2e       	mov	r11, r31
     2dc:	f0 2d       	mov	r31, r0
			takenspace=USART_0_read();
			printf("%d\n", takenspace);
     2de:	0f 2e       	mov	r0, r31
     2e0:	f3 e1       	ldi	r31, 0x13	; 19
     2e2:	cf 2e       	mov	r12, r31
     2e4:	f3 e0       	ldi	r31, 0x03	; 3
     2e6:	df 2e       	mov	r13, r31
     2e8:	f0 2d       	mov	r31, r0
			open=0;
		    loop=0;
			break;
			case 1://if user entered a 1 it is actually option 2 due to keypad layout closes exit gate
			select=2;
			printf("\nNumber entered %d",select);
     2ea:	68 94       	set
     2ec:	66 24       	eor	r6, r6
     2ee:	61 f8       	bld	r6, 1
	lcd_puts(buffer);
	lcd_puts("\nMax Spaces: 50");
	
	while (1)
	{
		if (PORTC_get_pin_level(usercontrol_button) == 0)//reads control button checking if it has been pressed to do the functions within
     2f0:	34 99       	sbic	0x06, 4	; 6
     2f2:	97 c0       	rjmp	.+302    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		{
			loop=1;
			while( loop == 1)
			{
			printf("\n\nPress 1 on the keypad to open exit gate from office\nPress 2 on the keypad to close exit gate from office\n");
     2f4:	8e e2       	ldi	r24, 0x2E	; 46
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
			printf("Press 3 on the keypad to Enter Space taken on the keyboard\n");
     2fc:	89 e9       	ldi	r24, 0x99	; 153
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
		    //Reads keypad input once 
		    for (x=0;x<1;x++)
		    {
					userInput[x]= keypadScan();
     304:	0e 94 3f 03 	call	0x67e	; 0x67e <keypadScan>
					select = userInput[x];
		    }
			switch(select)
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	71 f1       	breq	.+92     	; 0x368 <main+0x2bc>
     30c:	20 f0       	brcs	.+8      	; 0x316 <main+0x26a>
     30e:	82 30       	cpi	r24, 0x02	; 2
     310:	09 f4       	brne	.+2      	; 0x314 <main+0x268>
     312:	49 c0       	rjmp	.+146    	; 0x3a6 <main+0x2fa>
     314:	78 c0       	rjmp	.+240    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			{
			case 0://if user entered a 0 it is actually option 1 due to keypad layout opens exit gate
			select=1;
			printf("\nNumber entered %d",select);
     316:	1f 92       	push	r1
     318:	ef 92       	push	r14
     31a:	1f 93       	push	r17
     31c:	0f 93       	push	r16
     31e:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	8a e0       	ldi	r24, 0x0A	; 10
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     32c:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32e:	ef e8       	ldi	r30, 0x8F	; 143
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <main+0x286>
     336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x28c>
     338:	00 00       	nop
     33a:	81 50       	subi	r24, 0x01	; 1
			for (x=0; x<10;x++)
     33c:	b9 f7       	brne	.-18     	; 0x32c <main+0x280>
     33e:	8e eb       	ldi	r24, 0xBE	; 190
	} else {
		PORTB &= ~(1 << pin);
     340:	2b 98       	cbi	0x05, 3	; 5
     342:	af e8       	ldi	r26, 0x8F	; 143
     344:	b1 e0       	ldi	r27, 0x01	; 1
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <main+0x29a>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x2a0>
     34c:	00 00       	nop
     34e:	81 50       	subi	r24, 0x01	; 1
			{
				PORTB_set_pin_level(EXIT,1);
				_delay_us(100);
			}
			for (x=0; x<190;x++)
     350:	b9 f7       	brne	.-18     	; 0x340 <main+0x294>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     352:	bf ef       	ldi	r27, 0xFF	; 255
     354:	e3 ed       	ldi	r30, 0xD3	; 211
     356:	f0 e3       	ldi	r31, 0x30	; 48
     358:	b1 50       	subi	r27, 0x01	; 1
     35a:	e0 40       	sbci	r30, 0x00	; 0
     35c:	f0 40       	sbci	r31, 0x00	; 0
     35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x2ac>
     360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x2b6>
     362:	00 00       	nop
			{
				PORTB_set_pin_level(EXIT,0);
				_delay_us(100);
			}
			_delay_ms(1000);
			open=0;
     364:	37 2c       	mov	r3, r7
		    loop=0;
			break;
     366:	5d c0       	rjmp	.+186    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			case 1://if user entered a 1 it is actually option 2 due to keypad layout closes exit gate
			select=2;
			printf("\nNumber entered %d",select);
     368:	1f 92       	push	r1
     36a:	6f 92       	push	r6
     36c:	1f 93       	push	r17
     36e:	0f 93       	push	r16
     370:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	8f e0       	ldi	r24, 0x0F	; 15
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     37e:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     380:	af e8       	ldi	r26, 0x8F	; 143
     382:	b1 e0       	ldi	r27, 0x01	; 1
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <main+0x2d8>
     388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x2de>
     38a:	00 00       	nop
     38c:	81 50       	subi	r24, 0x01	; 1
			for (x=0; x<15;x++)
     38e:	b9 f7       	brne	.-18     	; 0x37e <main+0x2d2>
     390:	89 eb       	ldi	r24, 0xB9	; 185
	} else {
		PORTB &= ~(1 << pin);
     392:	2b 98       	cbi	0x05, 3	; 5
     394:	ef e8       	ldi	r30, 0x8F	; 143
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <main+0x2ec>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x2f2>
     39e:	00 00       	nop
     3a0:	81 50       	subi	r24, 0x01	; 1
			{
				PORTB_set_pin_level(EXIT,1);
				_delay_us(100);
			}
			for (x=0; x<185;x++)
     3a2:	b9 f7       	brne	.-18     	; 0x392 <main+0x2e6>
     3a4:	3e c0       	rjmp	.+124    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			}
			loop=0;
			break;
			case 2://if user entered a 3 it is actually option 2 due to keypad layout allows user to enter desired space taken
			select=3;
			printf("\nNumber entered %d",select);
     3a6:	1f 92       	push	r1
     3a8:	5f 92       	push	r5
     3aa:	1f 93       	push	r17
     3ac:	0f 93       	push	r16
     3ae:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
			printf("\nEnter Value(in Send Value)of space taken: ");
     3b2:	bf 92       	push	r11
     3b4:	af 92       	push	r10
     3b6:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
			takenspace=USART_0_read();
     3ba:	0e 94 1e 03 	call	0x63c	; 0x63c <USART_0_read>
     3be:	f8 2e       	mov	r15, r24
			printf("%d\n", takenspace);
     3c0:	88 2e       	mov	r8, r24
     3c2:	91 2c       	mov	r9, r1
     3c4:	1f 92       	push	r1
     3c6:	8f 93       	push	r24
     3c8:	df 92       	push	r13
     3ca:	cf 92       	push	r12
     3cc:	0e 94 63 05 	call	0xac6	; 0xac6 <printf>
			lcd_clrscr();
     3d0:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
     3d4:	4a e0       	ldi	r20, 0x0A	; 10
     3d6:	be 01       	movw	r22, r28
     3d8:	6b 5f       	subi	r22, 0xFB	; 251
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	c4 01       	movw	r24, r8
     3de:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__itoa_ncheck>
			itoa(takenspace, buffer,10);
			lcd_puts("Spaces taken: ");
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts(buffer);
     3ea:	ce 01       	movw	r24, r28
     3ec:	05 96       	adiw	r24, 0x05	; 5
     3ee:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts("\nMax Spaces: 50");
     3f2:	8e e1       	ldi	r24, 0x1E	; 30
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			loop=0;
			break;
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	0e c0       	rjmp	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			default:
			printf("\nError,Please try again\n\n");
     406:	87 e1       	ldi	r24, 0x17	; 23
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 80 05 	call	0xb00	; 0xb00 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	a3 ed       	ldi	r26, 0xD3	; 211
     412:	b0 e3       	ldi	r27, 0x30	; 48
     414:	91 50       	subi	r25, 0x01	; 1
     416:	a0 40       	sbci	r26, 0x00	; 0
     418:	b0 40       	sbci	r27, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
     420:	69 cf       	rjmp	.-302    	; 0x2f4 <main+0x248>
			_delay_ms(1000);
			break;
			}
		}
		}
		if (takenspace<50)//checks if space taken is over 50 if it is i will go to the else if() statement and inform user car park is full
     422:	e1 e3       	ldi	r30, 0x31	; 49
     424:	ef 15       	cp	r30, r15
     426:	08 f4       	brcc	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     428:	51 c0       	rjmp	.+162    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
		{
		if(PORTB_get_pin_level(Entry_BUTTON) == 0 && PORTB_get_pin_level(ENTRY)==0)//checks if button is closed and entry gate level is at 0
     42a:	1f 99       	sbic	0x03, 7	; 3
     42c:	b7 c0       	rjmp	.+366    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
     42e:	1d 99       	sbic	0x03, 5	; 3
     430:	36 c0       	rjmp	.+108    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     432:	2e 9a       	sbi	0x05, 6	; 5
		{
			PORTB_set_pin_level(Red_LED,1);
			takenspace= takenspace+1;//increments the space taken as the entry gate has been opened indicating a person entering the car park	
     434:	f3 94       	inc	r15
     436:	4a e0       	ldi	r20, 0x0A	; 10
     438:	be 01       	movw	r22, r28
     43a:	6b 5f       	subi	r22, 0xFB	; 251
     43c:	7f 4f       	sbci	r23, 0xFF	; 255
     43e:	8f 2d       	mov	r24, r15
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__itoa_ncheck>
			itoa(takenspace, buffer,10);//converts integer to string to write new space taken to LCD
			lcd_clrscr();
     446:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
			lcd_puts("Spaces taken: ");
     44a:	8f e0       	ldi	r24, 0x0F	; 15
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts(buffer);
     452:	ce 01       	movw	r24, r28
     454:	05 96       	adiw	r24, 0x05	; 5
     456:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts("\nMax Spaces: 50");
     45a:	8e e1       	ldi	r24, 0x1E	; 30
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     466:	af e8       	ldi	r26, 0x8F	; 143
     468:	b1 e0       	ldi	r27, 0x01	; 1
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	81 50       	subi	r24, 0x01	; 1
		    for (x=0; x<10;x++)//opens entry gate
     474:	b9 f7       	brne	.-18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     476:	8e eb       	ldi	r24, 0xBE	; 190
	} else {
		PORTB &= ~(1 << pin);
     478:	2d 98       	cbi	0x05, 5	; 5
     47a:	ef e8       	ldi	r30, 0x8F	; 143
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     484:	00 00       	nop
     486:	81 50       	subi	r24, 0x01	; 1
		    {
				PORTB_set_pin_level(ENTRY,1);
				_delay_us(100);
		    }
			for (x=0; x<190;x++)
     488:	b9 f7       	brne	.-18     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     48a:	2e 98       	cbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	ff ef       	ldi	r31, 0xFF	; 255
     48e:	23 ed       	ldi	r18, 0xD3	; 211
     490:	80 e3       	ldi	r24, 0x30	; 48
     492:	f1 50       	subi	r31, 0x01	; 1
     494:	20 40       	sbci	r18, 0x00	; 0
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     49c:	00 00       	nop
				_delay_us(100);
			}
			PORTB_set_pin_level(Red_LED,0);
			_delay_ms(1000);
		}
		if (PORTB_get_pin_level(Entry_BUTTON)==1)//closes entry gate after a second to simulate a car entering 
     49e:	1f 9b       	sbis	0x03, 7	; 3
     4a0:	1e c0       	rjmp	.+60     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4a2:	8f e0       	ldi	r24, 0x0F	; 15
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     4a4:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a6:	af e8       	ldi	r26, 0x8F	; 143
     4a8:	b1 e0       	ldi	r27, 0x01	; 1
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
     4b2:	81 50       	subi	r24, 0x01	; 1
		{
			for (x=0; x<15;x++)
     4b4:	b9 f7       	brne	.-18     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4b6:	89 eb       	ldi	r24, 0xB9	; 185
	} else {
		PORTB &= ~(1 << pin);
     4b8:	2d 98       	cbi	0x05, 5	; 5
     4ba:	ef e8       	ldi	r30, 0x8F	; 143
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c4:	00 00       	nop
     4c6:	81 50       	subi	r24, 0x01	; 1
			{
				PORTB_set_pin_level(ENTRY,1);
				_delay_us(100);
			}
			for (x=0; x<185;x++)
     4c8:	b9 f7       	brne	.-18     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4ca:	09 c0       	rjmp	.+18     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				PORTB_set_pin_level(ENTRY,0);
				_delay_us(100);
			}
		}
		}
		else if (full==0)
     4cc:	41 10       	cpse	r4, r1
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
		{
			lcd_clrscr();
     4d0:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
			lcd_puts("Car park is full");
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			full=1;
     4dc:	4e 2c       	mov	r4, r14
		}

		if (takenspace>0)
     4de:	ff 20       	and	r15, r15
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
     4e2:	06 cf       	rjmp	.-500    	; 0x2f0 <main+0x244>
		{
		if(PORTD_get_pin_level(Exit_BUTTON) == 0 && PORTB_get_pin_level(EXIT)==0)//checks if button is closed and exit gate level is at 0
     4e4:	4b 99       	sbic	0x09, 3	; 9
     4e6:	3d c0       	rjmp	.+122    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     4e8:	1b 99       	sbic	0x03, 3	; 3
     4ea:	3b c0       	rjmp	.+118    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
     4ec:	5a 9a       	sbi	0x0b, 2	; 11
		{
			full=0;//unlocks gate as soon as a car passes through exit gate as there will be a space again
			PORTD_set_pin_level(Ext_RED_LED,1);
			takenspace= takenspace-1;// takes one away from space taken as a car has left the car park
     4ee:	fa 94       	dec	r15
     4f0:	4a e0       	ldi	r20, 0x0A	; 10
     4f2:	be 01       	movw	r22, r28
     4f4:	6b 5f       	subi	r22, 0xFB	; 251
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	8f 2d       	mov	r24, r15
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__itoa_ncheck>
			itoa(takenspace, buffer,10);// converts integer to string to be printed by LCD
			lcd_clrscr();
     500:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
     504:	8a e0       	ldi	r24, 0x0A	; 10
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     506:	2b 9a       	sbi	0x05, 3	; 5
     508:	af e8       	ldi	r26, 0x8F	; 143
     50a:	b1 e0       	ldi	r27, 0x01	; 1
     50c:	11 97       	sbiw	r26, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     510:	00 c0       	rjmp	.+0      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     512:	00 00       	nop
     514:	81 50       	subi	r24, 0x01	; 1
			for (x=0; x<10;x++)//opens exit gate 
     516:	b9 f7       	brne	.-18     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     518:	8e eb       	ldi	r24, 0xBE	; 190
	} else {
		PORTB &= ~(1 << pin);
     51a:	2b 98       	cbi	0x05, 3	; 5
     51c:	ef e8       	ldi	r30, 0x8F	; 143
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	31 97       	sbiw	r30, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     524:	00 c0       	rjmp	.+0      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     526:	00 00       	nop
     528:	81 50       	subi	r24, 0x01	; 1
			{
				PORTB_set_pin_level(EXIT,1);
				_delay_us(100);
			}
			for (x=0; x<190;x++)
     52a:	b9 f7       	brne	.-18     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			{
				PORTB_set_pin_level(EXIT,0);
				_delay_us(100);
			}
			lcd_puts("Spaces taken: ");
     52c:	8f e0       	ldi	r24, 0x0F	; 15
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts(buffer);
     534:	ce 01       	movw	r24, r28
     536:	05 96       	adiw	r24, 0x05	; 5
     538:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			lcd_puts("\nMax Spaces: 50");
     53c:	8e e1       	ldi	r24, 0x1E	; 30
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	ff ef       	ldi	r31, 0xFF	; 255
     546:	23 ed       	ldi	r18, 0xD3	; 211
     548:	80 e3       	ldi	r24, 0x30	; 48
     54a:	f1 50       	subi	r31, 0x01	; 1
     54c:	20 40       	sbci	r18, 0x00	; 0
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	e1 f7       	brne	.-8      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
     552:	00 c0       	rjmp	.+0      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     554:	00 00       	nop
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     556:	5a 98       	cbi	0x0b, 2	; 11
			_delay_ms(1000);
			PORTD_set_pin_level(Ext_RED_LED,0);
			open=1;//stops the gate being closed automatically after being opened by control button
		}
		if (PORTD_get_pin_level(Exit_BUTTON)==1 && open==1)// checks if exit button is not pressed and open is equal to 1 to close exit gate
     558:	4b 99       	sbic	0x09, 3	; 9
     55a:	09 c0       	rjmp	.+18     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
			lcd_puts("Spaces taken: ");
			lcd_puts(buffer);
			lcd_puts("\nMax Spaces: 50");
			_delay_ms(1000);
			PORTD_set_pin_level(Ext_RED_LED,0);
			open=1;//stops the gate being closed automatically after being opened by control button
     55c:	3e 2c       	mov	r3, r14

		if (takenspace>0)
		{
		if(PORTD_get_pin_level(Exit_BUTTON) == 0 && PORTB_get_pin_level(EXIT)==0)//checks if button is closed and exit gate level is at 0
		{
			full=0;//unlocks gate as soon as a car passes through exit gate as there will be a space again
     55e:	47 2c       	mov	r4, r7
     560:	c7 ce       	rjmp	.-626    	; 0x2f0 <main+0x244>
			lcd_puts("\nMax Spaces: 50");
			_delay_ms(1000);
			PORTD_set_pin_level(Ext_RED_LED,0);
			open=1;//stops the gate being closed automatically after being opened by control button
		}
		if (PORTD_get_pin_level(Exit_BUTTON)==1 && open==1)// checks if exit button is not pressed and open is equal to 1 to close exit gate
     562:	4b 9b       	sbis	0x09, 3	; 9
     564:	c5 ce       	rjmp	.-630    	; 0x2f0 <main+0x244>
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	39 12       	cpse	r3, r25
     56a:	c2 ce       	rjmp	.-636    	; 0x2f0 <main+0x244>
     56c:	01 c0       	rjmp	.+2      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>

		if (takenspace>0)
		{
		if(PORTD_get_pin_level(Exit_BUTTON) == 0 && PORTB_get_pin_level(EXIT)==0)//checks if button is closed and exit gate level is at 0
		{
			full=0;//unlocks gate as soon as a car passes through exit gate as there will be a space again
     56e:	47 2c       	mov	r4, r7
     570:	8f e0       	ldi	r24, 0x0F	; 15
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     572:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	af e8       	ldi	r26, 0x8F	; 143
     576:	b1 e0       	ldi	r27, 0x01	; 1
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     57e:	00 00       	nop
     580:	81 50       	subi	r24, 0x01	; 1
			PORTD_set_pin_level(Ext_RED_LED,0);
			open=1;//stops the gate being closed automatically after being opened by control button
		}
		if (PORTD_get_pin_level(Exit_BUTTON)==1 && open==1)// checks if exit button is not pressed and open is equal to 1 to close exit gate
		{
			for (x=0; x<15;x++)
     582:	b9 f7       	brne	.-18     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
     584:	89 eb       	ldi	r24, 0xB9	; 185
	} else {
		PORTB &= ~(1 << pin);
     586:	2b 98       	cbi	0x05, 3	; 5
     588:	ef e8       	ldi	r30, 0x8F	; 143
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     590:	00 c0       	rjmp	.+0      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     592:	00 00       	nop
     594:	81 50       	subi	r24, 0x01	; 1
			{
				PORTB_set_pin_level(EXIT,1);
				_delay_us(100);
			}
			for (x=0; x<185;x++)
     596:	b9 f7       	brne	.-18     	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
     598:	3e 2c       	mov	r3, r14
     59a:	aa ce       	rjmp	.-684    	; 0x2f0 <main+0x244>
				_delay_us(100);
			}
			PORTB_set_pin_level(Red_LED,0);
			_delay_ms(1000);
		}
		if (PORTB_get_pin_level(Entry_BUTTON)==1)//closes entry gate after a second to simulate a car entering 
     59c:	1f 99       	sbic	0x03, 7	; 3
     59e:	81 cf       	rjmp	.-254    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     5a0:	9e cf       	rjmp	.-196    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>

000005a2 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     5a2:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     5a4:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     5a6:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     5a8:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     5aa:	0e 94 05 03 	call	0x60a	; 0x60a <USART_0_init>
     5ae:	08 95       	ret

000005b0 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
     5b0:	8f ee       	ldi	r24, 0xEF	; 239
     5b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     5b6:	84 b1       	in	r24, 0x04	; 4
     5b8:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     5ba:	85 b1       	in	r24, 0x05	; 5
     5bc:	9f ef       	ldi	r25, 0xFF	; 255
     5be:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     5c0:	87 b1       	in	r24, 0x07	; 7
     5c2:	80 78       	andi	r24, 0x80	; 128
     5c4:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
     5c6:	88 b1       	in	r24, 0x08	; 8
     5c8:	8f 67       	ori	r24, 0x7F	; 127
     5ca:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     5cc:	8a b1       	in	r24, 0x0a	; 10
     5ce:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     5d0:	8b b1       	in	r24, 0x0b	; 11
     5d2:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	60 e8       	ldi	r22, 0x80	; 128
     5d8:	81 e6       	ldi	r24, 0x61	; 97
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     5e0:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     5e2:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	USART_0_initialization();
     5e4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <USART_0_initialization>
     5e8:	08 95       	ret

000005ea <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     5ea:	2f b7       	in	r18, 0x3f	; 63
	cli
     5ec:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     5ee:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     5f0:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     5f2:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     5f4:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     5f6:	08 95       	ret

000005f8 <USART0ReceiveByte>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
     5f8:	e0 ec       	ldi	r30, 0xC0	; 192
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	88 23       	and	r24, r24
     600:	ec f7       	brge	.-6      	; 0x5fc <USART0ReceiveByte+0x4>
     602:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	08 95       	ret

0000060a <USART_0_init>:
     60a:	e4 e6       	ldi	r30, 0x64	; 100
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	8d 7f       	andi	r24, 0xFD	; 253
     612:	80 83       	st	Z, r24
     614:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     618:	87 e6       	ldi	r24, 0x67	; 103
     61a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     61e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     622:	88 e9       	ldi	r24, 0x98	; 152
     624:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     628:	e2 e4       	ldi	r30, 0x42	; 66
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	84 e0       	ldi	r24, 0x04	; 4
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	93 83       	std	Z+3, r25	; 0x03
     632:	82 83       	std	Z+2, r24	; 0x02
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	08 95       	ret

0000063c <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
     63c:	e0 ec       	ldi	r30, 0xC0	; 192
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	88 23       	and	r24, r24
     644:	ec f7       	brge	.-6      	; 0x640 <USART_0_read+0x4>
		;
	return UDR0;
     646:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     64a:	08 95       	ret

0000064c <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
     64c:	e0 ec       	ldi	r30, 0xC0	; 192
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	90 81       	ld	r25, Z
     652:	95 ff       	sbrs	r25, 5
     654:	fd cf       	rjmp	.-6      	; 0x650 <USART_0_write+0x4>
		;
	UDR0 = data;
     656:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     65a:	08 95       	ret

0000065c <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     65c:	0e 94 26 03 	call	0x64c	; 0x64c <USART_0_write>
	return 0;
}
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret

00000666 <keypadConfigure>:
	PORTC &= 0xF0;	//pull row pins low
	if((PINB & 0x07) == 0x07)
		return 0;
	else
		return 1;
}
     666:	8f e0       	ldi	r24, 0x0F	; 15
     668:	87 b9       	out	0x07, r24	; 7
     66a:	20 98       	cbi	0x04, 0	; 4
     66c:	20 98       	cbi	0x04, 0	; 4
     66e:	28 9a       	sbi	0x05, 0	; 5
     670:	21 98       	cbi	0x04, 1	; 4
     672:	21 98       	cbi	0x04, 1	; 4
     674:	29 9a       	sbi	0x05, 1	; 5
     676:	22 98       	cbi	0x04, 2	; 4
     678:	22 98       	cbi	0x04, 2	; 4
     67a:	2a 9a       	sbi	0x05, 2	; 5
     67c:	08 95       	ret

0000067e <keypadScan>:
/***************************************************************************************
Function to scan the keypad to detect a key press
The position of the key pressed is returned
*/
unsigned char keypadScan(void)
{
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <keypadScan+0x12>
     690:	00 d0       	rcall	.+0      	; 0x692 <keypadScan+0x14>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
	char rowScan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
     696:	8e ef       	ldi	r24, 0xFE	; 254
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	8d ef       	ldi	r24, 0xFD	; 253
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	8b ef       	ldi	r24, 0xFB	; 251
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	87 ef       	ldi	r24, 0xF7	; 247
     6a4:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char i, key=0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
			//if(gpio_pin_is_low(COL1))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 0; break;	//row1, col1
					case 1:	key = 3; break;	//row2, col1
     6a8:	73 e0       	ldi	r23, 0x03	; 3
			if(PORTB_get_pin_level(COL1) == 0)
			//if(gpio_pin_is_low(COL1))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 0; break;	//row1, col1
     6aa:	60 e0       	ldi	r22, 0x00	; 0
					case 1:	key = 3; break;	//row2, col1
					case 2:	key = 6; break;	//row3, col1
     6ac:	56 e0       	ldi	r21, 0x06	; 6
					case 3:	key = 9; break;	//row4, col1
     6ae:	49 e0       	ldi	r20, 0x09	; 9
			//if(gpio_pin_is_low(COL2))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 1; break;	//row1, col1
					case 1:	key = 4; break;	//row2, col1
     6b0:	04 e0       	ldi	r16, 0x04	; 4
			if(PORTB_get_pin_level(COL2) == 0)
			//if(gpio_pin_is_low(COL2))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 1; break;	//row1, col1
     6b2:	11 e0       	ldi	r17, 0x01	; 1
					case 1:	key = 4; break;	//row2, col1
					case 2:	key = 7; break;	//row3, col1
     6b4:	b7 e0       	ldi	r27, 0x07	; 7
					case 3:	key = 10; break;	//row4, col1
     6b6:	aa e0       	ldi	r26, 0x0A	; 10
			//if (gpio_pin_is_low(COL3))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 2; break;	//row1, col1
					case 1:	key = 5; break;	//row2, col1
     6b8:	0f 2e       	mov	r0, r31
     6ba:	f5 e0       	ldi	r31, 0x05	; 5
     6bc:	df 2e       	mov	r13, r31
     6be:	f0 2d       	mov	r31, r0
			if(PORTB_get_pin_level(COL3) == 0)
			//if (gpio_pin_is_low(COL3))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 2; break;	//row1, col1
     6c0:	68 94       	set
     6c2:	ee 24       	eor	r14, r14
     6c4:	e1 f8       	bld	r14, 1
					case 1:	key = 5; break;	//row2, col1
					case 2:	key = 8; break;	//row3, col1
     6c6:	68 94       	set
     6c8:	ff 24       	eor	r15, r15
     6ca:	f3 f8       	bld	r15, 3
					case 3:	key = 11; break;	//row4, col1
     6cc:	0f 2e       	mov	r0, r31
     6ce:	fb e0       	ldi	r31, 0x0B	; 11
     6d0:	cf 2e       	mov	r12, r31
     6d2:	f0 2d       	mov	r31, r0
The position of the key pressed is returned
*/
unsigned char keypadScan(void)
{
	char rowScan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
	unsigned char i, key=0;
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <keypadScan+0x5c>
     6d8:	2f 5f       	subi	r18, 0xFF	; 255
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	92 0f       	add	r25, r18
	while(1)
	{
		for(i=0;i<=3;i++)
		{
			PORTC = rowScan[i];
     6de:	e1 e0       	ldi	r30, 0x01	; 1
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	ec 0f       	add	r30, r28
     6e4:	fd 1f       	adc	r31, r29
     6e6:	e9 0f       	add	r30, r25
     6e8:	f1 1d       	adc	r31, r1
     6ea:	30 81       	ld	r19, Z
     6ec:	38 b9       	out	0x08, r19	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	ef e9       	ldi	r30, 0x9F	; 159
     6f0:	ff e0       	ldi	r31, 0x0F	; 15
     6f2:	31 97       	sbiw	r30, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <keypadScan+0x74>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <keypadScan+0x7a>
     6f8:	00 00       	nop
			_delay_ms(1);
			if(PORTB_get_pin_level(COL1) == 0)
     6fa:	18 99       	sbic	0x03, 0	; 3
     6fc:	1d c0       	rjmp	.+58     	; 0x738 <keypadScan+0xba>
			//if(gpio_pin_is_low(COL1))		//is key on column 1?
			{
				switch(i)	//decode keypress
     6fe:	91 30       	cpi	r25, 0x01	; 1
     700:	41 f0       	breq	.+16     	; 0x712 <keypadScan+0x94>
     702:	28 f0       	brcs	.+10     	; 0x70e <keypadScan+0x90>
     704:	92 30       	cpi	r25, 0x02	; 2
     706:	39 f0       	breq	.+14     	; 0x716 <keypadScan+0x98>
     708:	93 30       	cpi	r25, 0x03	; 3
     70a:	39 f0       	breq	.+14     	; 0x71a <keypadScan+0x9c>
     70c:	07 c0       	rjmp	.+14     	; 0x71c <keypadScan+0x9e>
				{
					case 0:	key = 0; break;	//row1, col1
     70e:	86 2f       	mov	r24, r22
     710:	05 c0       	rjmp	.+10     	; 0x71c <keypadScan+0x9e>
					case 1:	key = 3; break;	//row2, col1
     712:	87 2f       	mov	r24, r23
     714:	03 c0       	rjmp	.+6      	; 0x71c <keypadScan+0x9e>
					case 2:	key = 6; break;	//row3, col1
     716:	85 2f       	mov	r24, r21
     718:	01 c0       	rjmp	.+2      	; 0x71c <keypadScan+0x9e>
					case 3:	key = 9; break;	//row4, col1
     71a:	84 2f       	mov	r24, r20
     71c:	ff ef       	ldi	r31, 0xFF	; 255
     71e:	39 ef       	ldi	r19, 0xF9	; 249
     720:	e0 e0       	ldi	r30, 0x00	; 0
     722:	f1 50       	subi	r31, 0x01	; 1
     724:	30 40       	sbci	r19, 0x00	; 0
     726:	e0 40       	sbci	r30, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <keypadScan+0xa4>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <keypadScan+0xae>
     72c:	00 00       	nop
					default:	break;
				}
				//debounce key
				_delay_ms(20);
				if(PORTB_get_pin_level(COL1) == 0)
     72e:	18 99       	sbic	0x03, 0	; 3
     730:	03 c0       	rjmp	.+6      	; 0x738 <keypadScan+0xba>
				//if(gpio_pin_is_low(COL1))
				{
					//while(gpio_pin_is_low(COL1))	//wait for key release
					while(PORTB_get_pin_level(COL1) == 0)
     732:	18 9b       	sbis	0x03, 0	; 3
     734:	fe cf       	rjmp	.-4      	; 0x732 <keypadScan+0xb4>
     736:	5b c0       	rjmp	.+182    	; 0x7ee <keypadScan+0x170>
					{}
					return key;		
				}
			}
			if(PORTB_get_pin_level(COL2) == 0)
     738:	19 99       	sbic	0x03, 1	; 3
     73a:	1d c0       	rjmp	.+58     	; 0x776 <keypadScan+0xf8>
			//if(gpio_pin_is_low(COL2))		//is key on column 1?
			{
				switch(i)	//decode keypress
     73c:	91 30       	cpi	r25, 0x01	; 1
     73e:	41 f0       	breq	.+16     	; 0x750 <keypadScan+0xd2>
     740:	28 f0       	brcs	.+10     	; 0x74c <keypadScan+0xce>
     742:	92 30       	cpi	r25, 0x02	; 2
     744:	39 f0       	breq	.+14     	; 0x754 <keypadScan+0xd6>
     746:	93 30       	cpi	r25, 0x03	; 3
     748:	39 f0       	breq	.+14     	; 0x758 <keypadScan+0xda>
     74a:	07 c0       	rjmp	.+14     	; 0x75a <keypadScan+0xdc>
				{
					case 0:	key = 1; break;	//row1, col1
     74c:	81 2f       	mov	r24, r17
     74e:	05 c0       	rjmp	.+10     	; 0x75a <keypadScan+0xdc>
					case 1:	key = 4; break;	//row2, col1
     750:	80 2f       	mov	r24, r16
     752:	03 c0       	rjmp	.+6      	; 0x75a <keypadScan+0xdc>
					case 2:	key = 7; break;	//row3, col1
     754:	8b 2f       	mov	r24, r27
     756:	01 c0       	rjmp	.+2      	; 0x75a <keypadScan+0xdc>
					case 3:	key = 10; break;	//row4, col1
     758:	8a 2f       	mov	r24, r26
     75a:	ff ef       	ldi	r31, 0xFF	; 255
     75c:	39 ef       	ldi	r19, 0xF9	; 249
     75e:	e0 e0       	ldi	r30, 0x00	; 0
     760:	f1 50       	subi	r31, 0x01	; 1
     762:	30 40       	sbci	r19, 0x00	; 0
     764:	e0 40       	sbci	r30, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <keypadScan+0xe2>
     768:	00 c0       	rjmp	.+0      	; 0x76a <keypadScan+0xec>
     76a:	00 00       	nop
					default:	break;
				}
				//debounce key
				_delay_ms(20);
				if(PORTB_get_pin_level(COL2) == 0)
     76c:	19 99       	sbic	0x03, 1	; 3
     76e:	03 c0       	rjmp	.+6      	; 0x776 <keypadScan+0xf8>
				//if(gpio_pin_is_low(COL2))
				{
					//while(gpio_pin_is_low(COL2))	//wait for key release
					while(PORTB_get_pin_level(COL2) == 0)
     770:	19 9b       	sbis	0x03, 1	; 3
     772:	fe cf       	rjmp	.-4      	; 0x770 <keypadScan+0xf2>
     774:	3c c0       	rjmp	.+120    	; 0x7ee <keypadScan+0x170>
					{}
					return key;
				}			
			}
			if(PORTB_get_pin_level(COL3) == 0)
     776:	1a 99       	sbic	0x03, 2	; 3
     778:	1a c0       	rjmp	.+52     	; 0x7ae <keypadScan+0x130>
			//if (gpio_pin_is_low(COL3))		//is key on column 1?
			{
				switch(i)	//decode keypress
     77a:	91 30       	cpi	r25, 0x01	; 1
     77c:	31 f0       	breq	.+12     	; 0x78a <keypadScan+0x10c>
     77e:	40 f1       	brcs	.+80     	; 0x7d0 <keypadScan+0x152>
     780:	92 30       	cpi	r25, 0x02	; 2
     782:	41 f1       	breq	.+80     	; 0x7d4 <keypadScan+0x156>
     784:	93 30       	cpi	r25, 0x03	; 3
     786:	b9 f0       	breq	.+46     	; 0x7b6 <keypadScan+0x138>
     788:	02 c0       	rjmp	.+4      	; 0x78e <keypadScan+0x110>
				{
					case 0:	key = 2; break;	//row1, col1
					case 1:	key = 5; break;	//row2, col1
     78a:	8d 2d       	mov	r24, r13
     78c:	24 c0       	rjmp	.+72     	; 0x7d6 <keypadScan+0x158>
     78e:	ff ef       	ldi	r31, 0xFF	; 255
     790:	39 ef       	ldi	r19, 0xF9	; 249
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	f1 50       	subi	r31, 0x01	; 1
     796:	30 40       	sbci	r19, 0x00	; 0
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <keypadScan+0x116>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <keypadScan+0x120>
     79e:	00 00       	nop
					case 3:	key = 11; break;	//row4, col1
					default:	break;
				}
				//debounce key
				_delay_ms(20);
				if(PORTB_get_pin_level(COL3) == 0)
     7a0:	1a 99       	sbic	0x03, 2	; 3
     7a2:	05 c0       	rjmp	.+10     	; 0x7ae <keypadScan+0x130>
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <keypadScan+0x12a>
				switch(i)	//decode keypress
				{
					case 0:	key = 2; break;	//row1, col1
					case 1:	key = 5; break;	//row2, col1
					case 2:	key = 8; break;	//row3, col1
					case 3:	key = 11; break;	//row4, col1
     7a6:	8b e0       	ldi	r24, 0x0B	; 11
				_delay_ms(20);
				if(PORTB_get_pin_level(COL3) == 0)
				//if(gpio_pin_is_low(COL3))
				{
					//while(gpio_pin_is_low(COL3))	//wait for key release
					while(PORTB_get_pin_level(COL3) == 0)
     7a8:	1a 9b       	sbis	0x03, 2	; 3
     7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <keypadScan+0x12a>
     7ac:	20 c0       	rjmp	.+64     	; 0x7ee <keypadScan+0x170>
{
	char rowScan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
	unsigned char i, key=0;
	while(1)
	{
		for(i=0;i<=3;i++)
     7ae:	24 30       	cpi	r18, 0x04	; 4
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <keypadScan+0x136>
     7b2:	92 cf       	rjmp	.-220    	; 0x6d8 <keypadScan+0x5a>
     7b4:	8f cf       	rjmp	.-226    	; 0x6d4 <keypadScan+0x56>
     7b6:	ef ef       	ldi	r30, 0xFF	; 255
     7b8:	f9 ef       	ldi	r31, 0xF9	; 249
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	e1 50       	subi	r30, 0x01	; 1
     7be:	f0 40       	sbci	r31, 0x00	; 0
     7c0:	20 40       	sbci	r18, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <keypadScan+0x13e>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <keypadScan+0x148>
     7c6:	00 00       	nop
					case 3:	key = 11; break;	//row4, col1
					default:	break;
				}
				//debounce key
				_delay_ms(20);
				if(PORTB_get_pin_level(COL3) == 0)
     7c8:	1a 9b       	sbis	0x03, 2	; 3
     7ca:	ed cf       	rjmp	.-38     	; 0x7a6 <keypadScan+0x128>
				switch(i)	//decode keypress
				{
					case 0:	key = 2; break;	//row1, col1
					case 1:	key = 5; break;	//row2, col1
					case 2:	key = 8; break;	//row3, col1
					case 3:	key = 11; break;	//row4, col1
     7cc:	8c 2d       	mov	r24, r12
     7ce:	82 cf       	rjmp	.-252    	; 0x6d4 <keypadScan+0x56>
			if(PORTB_get_pin_level(COL3) == 0)
			//if (gpio_pin_is_low(COL3))		//is key on column 1?
			{
				switch(i)	//decode keypress
				{
					case 0:	key = 2; break;	//row1, col1
     7d0:	8e 2d       	mov	r24, r14
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <keypadScan+0x158>
					case 1:	key = 5; break;	//row2, col1
					case 2:	key = 8; break;	//row3, col1
     7d4:	8f 2d       	mov	r24, r15
     7d6:	3f ef       	ldi	r19, 0xFF	; 255
     7d8:	99 ef       	ldi	r25, 0xF9	; 249
     7da:	e0 e0       	ldi	r30, 0x00	; 0
     7dc:	31 50       	subi	r19, 0x01	; 1
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e0 40       	sbci	r30, 0x00	; 0
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <keypadScan+0x15e>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <keypadScan+0x168>
     7e6:	00 00       	nop
					case 3:	key = 11; break;	//row4, col1
					default:	break;
				}
				//debounce key
				_delay_ms(20);
				if(PORTB_get_pin_level(COL3) == 0)
     7e8:	1a 99       	sbic	0x03, 2	; 3
     7ea:	76 cf       	rjmp	.-276    	; 0x6d8 <keypadScan+0x5a>
     7ec:	dd cf       	rjmp	.-70     	; 0x7a8 <keypadScan+0x12a>
					return key;		
				}
			}
		}
	}
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	08 95       	ret

00000808 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     808:	45 9a       	sbi	0x08, 5	; 8
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	8a 95       	dec	r24
     80e:	f1 f7       	brne	.-4      	; 0x80c <toggle_e+0x4>
     810:	00 00       	nop
     812:	45 98       	cbi	0x08, 5	; 8
     814:	08 95       	ret

00000816 <lcd_write>:
     816:	cf 93       	push	r28
     818:	c8 2f       	mov	r28, r24
     81a:	66 23       	and	r22, r22
     81c:	11 f0       	breq	.+4      	; 0x822 <lcd_write+0xc>
     81e:	46 9a       	sbi	0x08, 6	; 8
     820:	01 c0       	rjmp	.+2      	; 0x824 <lcd_write+0xe>
     822:	46 98       	cbi	0x08, 6	; 8
     824:	54 9a       	sbi	0x0a, 4	; 10
     826:	55 9a       	sbi	0x0a, 5	; 10
     828:	56 9a       	sbi	0x0a, 6	; 10
     82a:	57 9a       	sbi	0x0a, 7	; 10
     82c:	5f 98       	cbi	0x0b, 7	; 11
     82e:	5e 98       	cbi	0x0b, 6	; 11
     830:	5d 98       	cbi	0x0b, 5	; 11
     832:	5c 98       	cbi	0x0b, 4	; 11
     834:	cc 23       	and	r28, r28
     836:	0c f4       	brge	.+2      	; 0x83a <lcd_write+0x24>
     838:	5f 9a       	sbi	0x0b, 7	; 11
     83a:	c6 fd       	sbrc	r28, 6
     83c:	5e 9a       	sbi	0x0b, 6	; 11
     83e:	c5 fd       	sbrc	r28, 5
     840:	5d 9a       	sbi	0x0b, 5	; 11
     842:	c4 fd       	sbrc	r28, 4
     844:	5c 9a       	sbi	0x0b, 4	; 11
     846:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     84a:	5f 98       	cbi	0x0b, 7	; 11
     84c:	5e 98       	cbi	0x0b, 6	; 11
     84e:	5d 98       	cbi	0x0b, 5	; 11
     850:	5c 98       	cbi	0x0b, 4	; 11
     852:	c3 fd       	sbrc	r28, 3
     854:	5f 9a       	sbi	0x0b, 7	; 11
     856:	c2 fd       	sbrc	r28, 2
     858:	5e 9a       	sbi	0x0b, 6	; 11
     85a:	c1 fd       	sbrc	r28, 1
     85c:	5d 9a       	sbi	0x0b, 5	; 11
     85e:	c0 fd       	sbrc	r28, 0
     860:	5c 9a       	sbi	0x0b, 4	; 11
     862:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     866:	5c 9a       	sbi	0x0b, 4	; 11
     868:	5d 9a       	sbi	0x0b, 5	; 11
     86a:	5e 9a       	sbi	0x0b, 6	; 11
     86c:	5f 9a       	sbi	0x0b, 7	; 11
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <lcd_command>:
     872:	ef e1       	ldi	r30, 0x1F	; 31
     874:	fe e4       	ldi	r31, 0x4E	; 78
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <lcd_command+0x4>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <lcd_command+0xa>
     87c:	00 00       	nop
     87e:	f5 e1       	ldi	r31, 0x15	; 21
     880:	fa 95       	dec	r31
     882:	f1 f7       	brne	.-4      	; 0x880 <lcd_command+0xe>
     884:	00 00       	nop
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	0e 94 0b 04 	call	0x816	; 0x816 <lcd_write>
     88c:	08 95       	ret

0000088e <lcd_clrscr>:
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>
     894:	08 95       	ret

00000896 <lcd_putc>:
     896:	ef e1       	ldi	r30, 0x1F	; 31
     898:	fe e4       	ldi	r31, 0x4E	; 78
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <lcd_putc+0x4>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <lcd_putc+0xa>
     8a0:	00 00       	nop
     8a2:	f5 e1       	ldi	r31, 0x15	; 21
     8a4:	fa 95       	dec	r31
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <lcd_putc+0xe>
     8a8:	00 00       	nop
     8aa:	8a 30       	cpi	r24, 0x0A	; 10
     8ac:	21 f4       	brne	.+8      	; 0x8b6 <lcd_putc+0x20>
     8ae:	80 ec       	ldi	r24, 0xC0	; 192
     8b0:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>
     8b4:	08 95       	ret
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	0e 94 0b 04 	call	0x816	; 0x816 <lcd_write>
     8bc:	08 95       	ret

000008be <lcd_puts>:
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	21 96       	adiw	r28, 0x01	; 1
     8c6:	fc 01       	movw	r30, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	88 23       	and	r24, r24
     8cc:	29 f0       	breq	.+10     	; 0x8d8 <lcd_puts+0x1a>
     8ce:	0e 94 4b 04 	call	0x896	; 0x896 <lcd_putc>
     8d2:	89 91       	ld	r24, Y+
     8d4:	81 11       	cpse	r24, r1
     8d6:	fb cf       	rjmp	.-10     	; 0x8ce <lcd_puts+0x10>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     8de:	cf 93       	push	r28
     8e0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     8e2:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     8e4:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     8e6:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     8e8:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     8ea:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     8ec:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     8ee:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	80 e7       	ldi	r24, 0x70	; 112
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <lcd_init+0x18>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
     900:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
	
	//Force data and RS, EN pins to 0
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     902:	5c 98       	cbi	0x0b, 4	; 11
	LCD_DATA0_PORT &= ~_BV(LCD_DATA1_PIN);
     904:	5d 98       	cbi	0x0b, 5	; 11
	LCD_DATA0_PORT &= ~_BV(LCD_DATA2_PIN);
     906:	5e 98       	cbi	0x0b, 6	; 11
	LCD_DATA0_PORT &= ~_BV(LCD_DATA3_PIN);
     908:	5f 98       	cbi	0x0b, 7	; 11
	LCD_RS_PORT &= ~_BV(LCD_RS_PIN);
     90a:	46 98       	cbi	0x08, 6	; 8
	LCD_E_PORT &= ~_BV(LCD_E_PIN);
     90c:	45 98       	cbi	0x08, 5	; 8
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     90e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     910:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     912:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     916:	8f e1       	ldi	r24, 0x1F	; 31
     918:	9e e4       	ldi	r25, 0x4E	; 78
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0x1b>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0x21>
     920:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     922:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     926:	8f e8       	ldi	r24, 0x8F	; 143
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <__stack+0x2b>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
     930:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     932:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     936:	8f e8       	ldi	r24, 0x8F	; 143
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x3b>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0x41>
     940:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     942:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     944:	0e 94 04 04 	call	0x808	; 0x808 <toggle_e>
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0x4d>
     950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0x53>
     952:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     954:	88 e2       	ldi	r24, 0x28	; 40
     956:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     95a:	88 e0       	ldi	r24, 0x08	; 8
     95c:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     960:	0e 94 47 04 	call	0x88e	; 0x88e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     964:	86 e0       	ldi	r24, 0x06	; 6
     966:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     96a:	8c 2f       	mov	r24, r28
     96c:	0e 94 39 04 	call	0x872	; 0x872 <lcd_command>

}/* lcd_init */
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <__divmodhi4>:
     974:	97 fb       	bst	r25, 7
     976:	07 2e       	mov	r0, r23
     978:	16 f4       	brtc	.+4      	; 0x97e <__divmodhi4+0xa>
     97a:	00 94       	com	r0
     97c:	07 d0       	rcall	.+14     	; 0x98c <__divmodhi4_neg1>
     97e:	77 fd       	sbrc	r23, 7
     980:	09 d0       	rcall	.+18     	; 0x994 <__divmodhi4_neg2>
     982:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodhi4>
     986:	07 fc       	sbrc	r0, 7
     988:	05 d0       	rcall	.+10     	; 0x994 <__divmodhi4_neg2>
     98a:	3e f4       	brtc	.+14     	; 0x99a <__divmodhi4_exit>

0000098c <__divmodhi4_neg1>:
     98c:	90 95       	com	r25
     98e:	81 95       	neg	r24
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	08 95       	ret

00000994 <__divmodhi4_neg2>:
     994:	70 95       	com	r23
     996:	61 95       	neg	r22
     998:	7f 4f       	sbci	r23, 0xFF	; 255

0000099a <__divmodhi4_exit>:
     99a:	08 95       	ret

0000099c <__udivmodhi4>:
     99c:	aa 1b       	sub	r26, r26
     99e:	bb 1b       	sub	r27, r27
     9a0:	51 e1       	ldi	r21, 0x11	; 17
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <__udivmodhi4_ep>

000009a4 <__udivmodhi4_loop>:
     9a4:	aa 1f       	adc	r26, r26
     9a6:	bb 1f       	adc	r27, r27
     9a8:	a6 17       	cp	r26, r22
     9aa:	b7 07       	cpc	r27, r23
     9ac:	10 f0       	brcs	.+4      	; 0x9b2 <__udivmodhi4_ep>
     9ae:	a6 1b       	sub	r26, r22
     9b0:	b7 0b       	sbc	r27, r23

000009b2 <__udivmodhi4_ep>:
     9b2:	88 1f       	adc	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	5a 95       	dec	r21
     9b8:	a9 f7       	brne	.-22     	; 0x9a4 <__udivmodhi4_loop>
     9ba:	80 95       	com	r24
     9bc:	90 95       	com	r25
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	08 95       	ret

000009c4 <do_rand>:
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
     9da:	68 81       	ld	r22, Y
     9dc:	79 81       	ldd	r23, Y+1	; 0x01
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	9b 81       	ldd	r25, Y+3	; 0x03
     9e2:	61 15       	cp	r22, r1
     9e4:	71 05       	cpc	r23, r1
     9e6:	81 05       	cpc	r24, r1
     9e8:	91 05       	cpc	r25, r1
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <do_rand+0x30>
     9ec:	64 e2       	ldi	r22, 0x24	; 36
     9ee:	79 ed       	ldi	r23, 0xD9	; 217
     9f0:	8b e5       	ldi	r24, 0x5B	; 91
     9f2:	97 e0       	ldi	r25, 0x07	; 7
     9f4:	2d e1       	ldi	r18, 0x1D	; 29
     9f6:	33 ef       	ldi	r19, 0xF3	; 243
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__divmodsi4>
     a00:	49 01       	movw	r8, r18
     a02:	5a 01       	movw	r10, r20
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
     a08:	a7 ea       	ldi	r26, 0xA7	; 167
     a0a:	b1 e4       	ldi	r27, 0x41	; 65
     a0c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__muluhisi3>
     a10:	6b 01       	movw	r12, r22
     a12:	7c 01       	movw	r14, r24
     a14:	ac ee       	ldi	r26, 0xEC	; 236
     a16:	b4 ef       	ldi	r27, 0xF4	; 244
     a18:	a5 01       	movw	r20, r10
     a1a:	94 01       	movw	r18, r8
     a1c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__mulohisi3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8c 0d       	add	r24, r12
     a26:	9d 1d       	adc	r25, r13
     a28:	ae 1d       	adc	r26, r14
     a2a:	bf 1d       	adc	r27, r15
     a2c:	b7 ff       	sbrs	r27, 7
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <do_rand+0x72>
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	a1 09       	sbc	r26, r1
     a34:	b0 48       	sbci	r27, 0x80	; 128
     a36:	88 83       	st	Y, r24
     a38:	99 83       	std	Y+1, r25	; 0x01
     a3a:	aa 83       	std	Y+2, r26	; 0x02
     a3c:	bb 83       	std	Y+3, r27	; 0x03
     a3e:	9f 77       	andi	r25, 0x7F	; 127
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	08 95       	ret

00000a56 <rand_r>:
     a56:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <do_rand>
     a5a:	08 95       	ret

00000a5c <rand>:
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <do_rand>
     a64:	08 95       	ret

00000a66 <srand>:
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     a6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a72:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     a76:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     a7a:	08 95       	ret

00000a7c <__itoa_ncheck>:
     a7c:	bb 27       	eor	r27, r27
     a7e:	4a 30       	cpi	r20, 0x0A	; 10
     a80:	31 f4       	brne	.+12     	; 0xa8e <__itoa_ncheck+0x12>
     a82:	99 23       	and	r25, r25
     a84:	22 f4       	brpl	.+8      	; 0xa8e <__itoa_ncheck+0x12>
     a86:	bd e2       	ldi	r27, 0x2D	; 45
     a88:	90 95       	com	r25
     a8a:	81 95       	neg	r24
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__utoa_common>

00000a92 <__utoa_ncheck>:
     a92:	bb 27       	eor	r27, r27

00000a94 <__utoa_common>:
     a94:	fb 01       	movw	r30, r22
     a96:	55 27       	eor	r21, r21
     a98:	aa 27       	eor	r26, r26
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	aa 1f       	adc	r26, r26
     aa0:	a4 17       	cp	r26, r20
     aa2:	10 f0       	brcs	.+4      	; 0xaa8 <__utoa_common+0x14>
     aa4:	a4 1b       	sub	r26, r20
     aa6:	83 95       	inc	r24
     aa8:	50 51       	subi	r21, 0x10	; 16
     aaa:	b9 f7       	brne	.-18     	; 0xa9a <__utoa_common+0x6>
     aac:	a0 5d       	subi	r26, 0xD0	; 208
     aae:	aa 33       	cpi	r26, 0x3A	; 58
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <__utoa_common+0x20>
     ab2:	a9 5d       	subi	r26, 0xD9	; 217
     ab4:	a1 93       	st	Z+, r26
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	79 f7       	brne	.-34     	; 0xa98 <__utoa_common+0x4>
     aba:	b1 11       	cpse	r27, r1
     abc:	b1 93       	st	Z+, r27
     abe:	11 92       	st	Z+, r1
     ac0:	cb 01       	movw	r24, r22
     ac2:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <strrev>

00000ac6 <printf>:
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e9 e6       	ldi	r30, 0x69	; 105
     acc:	f5 e0       	ldi	r31, 0x05	; 5
     ace:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__prologue_saves__+0x20>
     ad2:	ae 01       	movw	r20, r28
     ad4:	4b 5f       	subi	r20, 0xFB	; 251
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	fa 01       	movw	r30, r20
     ada:	61 91       	ld	r22, Z+
     adc:	71 91       	ld	r23, Z+
     ade:	af 01       	movw	r20, r30
     ae0:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__data_end+0x2>
     ae4:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__data_end+0x3>
     ae8:	0e 94 b0 05 	call	0xb60	; 0xb60 <vfprintf>
     aec:	e2 e0       	ldi	r30, 0x02	; 2
     aee:	0c 94 af 08 	jmp	0x115e	; 0x115e <__epilogue_restores__+0x20>

00000af2 <putchar>:
     af2:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <__data_end+0x2>
     af6:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <__data_end+0x3>
     afa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     afe:	08 95       	ret

00000b00 <puts>:
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <__data_end+0x2>
     b0c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <__data_end+0x3>
     b10:	23 81       	ldd	r18, Z+3	; 0x03
     b12:	21 ff       	sbrs	r18, 1
     b14:	1b c0       	rjmp	.+54     	; 0xb4c <puts+0x4c>
     b16:	8c 01       	movw	r16, r24
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	f8 01       	movw	r30, r16
     b1e:	81 91       	ld	r24, Z+
     b20:	8f 01       	movw	r16, r30
     b22:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <__data_end+0x2>
     b26:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <__data_end+0x3>
     b2a:	db 01       	movw	r26, r22
     b2c:	18 96       	adiw	r26, 0x08	; 8
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	19 97       	sbiw	r26, 0x09	; 9
     b34:	88 23       	and	r24, r24
     b36:	31 f0       	breq	.+12     	; 0xb44 <puts+0x44>
     b38:	09 95       	icall
     b3a:	89 2b       	or	r24, r25
     b3c:	79 f3       	breq	.-34     	; 0xb1c <puts+0x1c>
     b3e:	df ef       	ldi	r29, 0xFF	; 255
     b40:	cf ef       	ldi	r28, 0xFF	; 255
     b42:	ec cf       	rjmp	.-40     	; 0xb1c <puts+0x1c>
     b44:	8a e0       	ldi	r24, 0x0A	; 10
     b46:	09 95       	icall
     b48:	89 2b       	or	r24, r25
     b4a:	19 f0       	breq	.+6      	; 0xb52 <puts+0x52>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <puts+0x56>
     b52:	8d 2f       	mov	r24, r29
     b54:	9c 2f       	mov	r25, r28
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <vfprintf>:
     b60:	ab e0       	ldi	r26, 0x0B	; 11
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__prologue_saves__>
     b6c:	6c 01       	movw	r12, r24
     b6e:	7b 01       	movw	r14, r22
     b70:	8a 01       	movw	r16, r20
     b72:	fc 01       	movw	r30, r24
     b74:	17 82       	std	Z+7, r1	; 0x07
     b76:	16 82       	std	Z+6, r1	; 0x06
     b78:	83 81       	ldd	r24, Z+3	; 0x03
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	cc c1       	rjmp	.+920    	; 0xf16 <vfprintf+0x3b6>
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	3c 01       	movw	r6, r24
     b84:	f6 01       	movw	r30, r12
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	f7 01       	movw	r30, r14
     b8a:	93 fd       	sbrc	r25, 3
     b8c:	85 91       	lpm	r24, Z+
     b8e:	93 ff       	sbrs	r25, 3
     b90:	81 91       	ld	r24, Z+
     b92:	7f 01       	movw	r14, r30
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <vfprintf+0x3a>
     b98:	ba c1       	rjmp	.+884    	; 0xf0e <vfprintf+0x3ae>
     b9a:	85 32       	cpi	r24, 0x25	; 37
     b9c:	39 f4       	brne	.+14     	; 0xbac <vfprintf+0x4c>
     b9e:	93 fd       	sbrc	r25, 3
     ba0:	85 91       	lpm	r24, Z+
     ba2:	93 ff       	sbrs	r25, 3
     ba4:	81 91       	ld	r24, Z+
     ba6:	7f 01       	movw	r14, r30
     ba8:	85 32       	cpi	r24, 0x25	; 37
     baa:	29 f4       	brne	.+10     	; 0xbb6 <vfprintf+0x56>
     bac:	b6 01       	movw	r22, r12
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     bb4:	e7 cf       	rjmp	.-50     	; 0xb84 <vfprintf+0x24>
     bb6:	91 2c       	mov	r9, r1
     bb8:	21 2c       	mov	r2, r1
     bba:	31 2c       	mov	r3, r1
     bbc:	ff e1       	ldi	r31, 0x1F	; 31
     bbe:	f3 15       	cp	r31, r3
     bc0:	d8 f0       	brcs	.+54     	; 0xbf8 <vfprintf+0x98>
     bc2:	8b 32       	cpi	r24, 0x2B	; 43
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <vfprintf+0x84>
     bc6:	38 f4       	brcc	.+14     	; 0xbd6 <vfprintf+0x76>
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x8a>
     bcc:	83 32       	cpi	r24, 0x23	; 35
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <vfprintf+0x98>
     bd0:	23 2d       	mov	r18, r3
     bd2:	20 61       	ori	r18, 0x10	; 16
     bd4:	1d c0       	rjmp	.+58     	; 0xc10 <vfprintf+0xb0>
     bd6:	8d 32       	cpi	r24, 0x2D	; 45
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <vfprintf+0x92>
     bda:	80 33       	cpi	r24, 0x30	; 48
     bdc:	69 f4       	brne	.+26     	; 0xbf8 <vfprintf+0x98>
     bde:	23 2d       	mov	r18, r3
     be0:	21 60       	ori	r18, 0x01	; 1
     be2:	16 c0       	rjmp	.+44     	; 0xc10 <vfprintf+0xb0>
     be4:	83 2d       	mov	r24, r3
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	38 2e       	mov	r3, r24
     bea:	e3 2d       	mov	r30, r3
     bec:	e4 60       	ori	r30, 0x04	; 4
     bee:	3e 2e       	mov	r3, r30
     bf0:	2a c0       	rjmp	.+84     	; 0xc46 <vfprintf+0xe6>
     bf2:	f3 2d       	mov	r31, r3
     bf4:	f8 60       	ori	r31, 0x08	; 8
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <vfprintf+0xd2>
     bf8:	37 fc       	sbrc	r3, 7
     bfa:	2d c0       	rjmp	.+90     	; 0xc56 <vfprintf+0xf6>
     bfc:	20 ed       	ldi	r18, 0xD0	; 208
     bfe:	28 0f       	add	r18, r24
     c00:	2a 30       	cpi	r18, 0x0A	; 10
     c02:	40 f0       	brcs	.+16     	; 0xc14 <vfprintf+0xb4>
     c04:	8e 32       	cpi	r24, 0x2E	; 46
     c06:	b9 f4       	brne	.+46     	; 0xc36 <vfprintf+0xd6>
     c08:	36 fc       	sbrc	r3, 6
     c0a:	81 c1       	rjmp	.+770    	; 0xf0e <vfprintf+0x3ae>
     c0c:	23 2d       	mov	r18, r3
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	32 2e       	mov	r3, r18
     c12:	19 c0       	rjmp	.+50     	; 0xc46 <vfprintf+0xe6>
     c14:	36 fe       	sbrs	r3, 6
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0xc4>
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	98 9e       	mul	r9, r24
     c1c:	20 0d       	add	r18, r0
     c1e:	11 24       	eor	r1, r1
     c20:	92 2e       	mov	r9, r18
     c22:	11 c0       	rjmp	.+34     	; 0xc46 <vfprintf+0xe6>
     c24:	ea e0       	ldi	r30, 0x0A	; 10
     c26:	2e 9e       	mul	r2, r30
     c28:	20 0d       	add	r18, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	22 2e       	mov	r2, r18
     c2e:	f3 2d       	mov	r31, r3
     c30:	f0 62       	ori	r31, 0x20	; 32
     c32:	3f 2e       	mov	r3, r31
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0xe6>
     c36:	8c 36       	cpi	r24, 0x6C	; 108
     c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0xe2>
     c3a:	83 2d       	mov	r24, r3
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	38 2e       	mov	r3, r24
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0xe6>
     c42:	88 36       	cpi	r24, 0x68	; 104
     c44:	41 f4       	brne	.+16     	; 0xc56 <vfprintf+0xf6>
     c46:	f7 01       	movw	r30, r14
     c48:	93 fd       	sbrc	r25, 3
     c4a:	85 91       	lpm	r24, Z+
     c4c:	93 ff       	sbrs	r25, 3
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	81 11       	cpse	r24, r1
     c54:	b3 cf       	rjmp	.-154    	; 0xbbc <vfprintf+0x5c>
     c56:	98 2f       	mov	r25, r24
     c58:	9f 7d       	andi	r25, 0xDF	; 223
     c5a:	95 54       	subi	r25, 0x45	; 69
     c5c:	93 30       	cpi	r25, 0x03	; 3
     c5e:	28 f4       	brcc	.+10     	; 0xc6a <vfprintf+0x10a>
     c60:	0c 5f       	subi	r16, 0xFC	; 252
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	9f e3       	ldi	r25, 0x3F	; 63
     c66:	99 83       	std	Y+1, r25	; 0x01
     c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x124>
     c6a:	83 36       	cpi	r24, 0x63	; 99
     c6c:	31 f0       	breq	.+12     	; 0xc7a <vfprintf+0x11a>
     c6e:	83 37       	cpi	r24, 0x73	; 115
     c70:	71 f0       	breq	.+28     	; 0xc8e <vfprintf+0x12e>
     c72:	83 35       	cpi	r24, 0x53	; 83
     c74:	09 f0       	breq	.+2      	; 0xc78 <vfprintf+0x118>
     c76:	59 c0       	rjmp	.+178    	; 0xd2a <vfprintf+0x1ca>
     c78:	21 c0       	rjmp	.+66     	; 0xcbc <vfprintf+0x15c>
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	0e 5f       	subi	r16, 0xFE	; 254
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	88 24       	eor	r8, r8
     c86:	83 94       	inc	r8
     c88:	91 2c       	mov	r9, r1
     c8a:	53 01       	movw	r10, r6
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <vfprintf+0x154>
     c8e:	28 01       	movw	r4, r16
     c90:	f2 e0       	ldi	r31, 0x02	; 2
     c92:	4f 0e       	add	r4, r31
     c94:	51 1c       	adc	r5, r1
     c96:	f8 01       	movw	r30, r16
     c98:	a0 80       	ld	r10, Z
     c9a:	b1 80       	ldd	r11, Z+1	; 0x01
     c9c:	36 fe       	sbrs	r3, 6
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x146>
     ca0:	69 2d       	mov	r22, r9
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x14a>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	7f ef       	ldi	r23, 0xFF	; 255
     caa:	c5 01       	movw	r24, r10
     cac:	0e 94 9c 07 	call	0xf38	; 0xf38 <strnlen>
     cb0:	4c 01       	movw	r8, r24
     cb2:	82 01       	movw	r16, r4
     cb4:	f3 2d       	mov	r31, r3
     cb6:	ff 77       	andi	r31, 0x7F	; 127
     cb8:	3f 2e       	mov	r3, r31
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <vfprintf+0x188>
     cbc:	28 01       	movw	r4, r16
     cbe:	22 e0       	ldi	r18, 0x02	; 2
     cc0:	42 0e       	add	r4, r18
     cc2:	51 1c       	adc	r5, r1
     cc4:	f8 01       	movw	r30, r16
     cc6:	a0 80       	ld	r10, Z
     cc8:	b1 80       	ldd	r11, Z+1	; 0x01
     cca:	36 fe       	sbrs	r3, 6
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <vfprintf+0x174>
     cce:	69 2d       	mov	r22, r9
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x178>
     cd4:	6f ef       	ldi	r22, 0xFF	; 255
     cd6:	7f ef       	ldi	r23, 0xFF	; 255
     cd8:	c5 01       	movw	r24, r10
     cda:	0e 94 91 07 	call	0xf22	; 0xf22 <strnlen_P>
     cde:	4c 01       	movw	r8, r24
     ce0:	f3 2d       	mov	r31, r3
     ce2:	f0 68       	ori	r31, 0x80	; 128
     ce4:	3f 2e       	mov	r3, r31
     ce6:	82 01       	movw	r16, r4
     ce8:	33 fc       	sbrc	r3, 3
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <vfprintf+0x1c2>
     cec:	82 2d       	mov	r24, r2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 16       	cp	r8, r24
     cf2:	99 06       	cpc	r9, r25
     cf4:	b0 f4       	brcc	.+44     	; 0xd22 <vfprintf+0x1c2>
     cf6:	b6 01       	movw	r22, r12
     cf8:	80 e2       	ldi	r24, 0x20	; 32
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d00:	2a 94       	dec	r2
     d02:	f4 cf       	rjmp	.-24     	; 0xcec <vfprintf+0x18c>
     d04:	f5 01       	movw	r30, r10
     d06:	37 fc       	sbrc	r3, 7
     d08:	85 91       	lpm	r24, Z+
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	81 91       	ld	r24, Z+
     d0e:	5f 01       	movw	r10, r30
     d10:	b6 01       	movw	r22, r12
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d18:	21 10       	cpse	r2, r1
     d1a:	2a 94       	dec	r2
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	82 1a       	sub	r8, r18
     d20:	91 08       	sbc	r9, r1
     d22:	81 14       	cp	r8, r1
     d24:	91 04       	cpc	r9, r1
     d26:	71 f7       	brne	.-36     	; 0xd04 <vfprintf+0x1a4>
     d28:	e8 c0       	rjmp	.+464    	; 0xefa <vfprintf+0x39a>
     d2a:	84 36       	cpi	r24, 0x64	; 100
     d2c:	11 f0       	breq	.+4      	; 0xd32 <vfprintf+0x1d2>
     d2e:	89 36       	cpi	r24, 0x69	; 105
     d30:	41 f5       	brne	.+80     	; 0xd82 <vfprintf+0x222>
     d32:	f8 01       	movw	r30, r16
     d34:	37 fe       	sbrs	r3, 7
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <vfprintf+0x1e6>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0c 5f       	subi	r16, 0xFC	; 252
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <vfprintf+0x1f6>
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 5f       	subi	r16, 0xFE	; 254
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	f3 2d       	mov	r31, r3
     d58:	ff 76       	andi	r31, 0x6F	; 111
     d5a:	3f 2e       	mov	r3, r31
     d5c:	97 ff       	sbrs	r25, 7
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x212>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	f0 68       	ori	r31, 0x80	; 128
     d70:	3f 2e       	mov	r3, r31
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a3 01       	movw	r20, r6
     d78:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__ultoa_invert>
     d7c:	88 2e       	mov	r8, r24
     d7e:	86 18       	sub	r8, r6
     d80:	45 c0       	rjmp	.+138    	; 0xe0c <vfprintf+0x2ac>
     d82:	85 37       	cpi	r24, 0x75	; 117
     d84:	31 f4       	brne	.+12     	; 0xd92 <vfprintf+0x232>
     d86:	23 2d       	mov	r18, r3
     d88:	2f 7e       	andi	r18, 0xEF	; 239
     d8a:	b2 2e       	mov	r11, r18
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	25 c0       	rjmp	.+74     	; 0xddc <vfprintf+0x27c>
     d92:	93 2d       	mov	r25, r3
     d94:	99 7f       	andi	r25, 0xF9	; 249
     d96:	b9 2e       	mov	r11, r25
     d98:	8f 36       	cpi	r24, 0x6F	; 111
     d9a:	c1 f0       	breq	.+48     	; 0xdcc <vfprintf+0x26c>
     d9c:	18 f4       	brcc	.+6      	; 0xda4 <vfprintf+0x244>
     d9e:	88 35       	cpi	r24, 0x58	; 88
     da0:	79 f0       	breq	.+30     	; 0xdc0 <vfprintf+0x260>
     da2:	b5 c0       	rjmp	.+362    	; 0xf0e <vfprintf+0x3ae>
     da4:	80 37       	cpi	r24, 0x70	; 112
     da6:	19 f0       	breq	.+6      	; 0xdae <vfprintf+0x24e>
     da8:	88 37       	cpi	r24, 0x78	; 120
     daa:	21 f0       	breq	.+8      	; 0xdb4 <vfprintf+0x254>
     dac:	b0 c0       	rjmp	.+352    	; 0xf0e <vfprintf+0x3ae>
     dae:	e9 2f       	mov	r30, r25
     db0:	e0 61       	ori	r30, 0x10	; 16
     db2:	be 2e       	mov	r11, r30
     db4:	b4 fe       	sbrs	r11, 4
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <vfprintf+0x272>
     db8:	fb 2d       	mov	r31, r11
     dba:	f4 60       	ori	r31, 0x04	; 4
     dbc:	bf 2e       	mov	r11, r31
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x272>
     dc0:	34 fe       	sbrs	r3, 4
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <vfprintf+0x278>
     dc4:	29 2f       	mov	r18, r25
     dc6:	26 60       	ori	r18, 0x06	; 6
     dc8:	b2 2e       	mov	r11, r18
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <vfprintf+0x278>
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <vfprintf+0x27c>
     dd2:	20 e1       	ldi	r18, 0x10	; 16
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x27c>
     dd8:	20 e1       	ldi	r18, 0x10	; 16
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	f8 01       	movw	r30, r16
     dde:	b7 fe       	sbrs	r11, 7
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <vfprintf+0x290>
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0c 5f       	subi	r16, 0xFC	; 252
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x29c>
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 5f       	subi	r16, 0xFE	; 254
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	a3 01       	movw	r20, r6
     dfe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__ultoa_invert>
     e02:	88 2e       	mov	r8, r24
     e04:	86 18       	sub	r8, r6
     e06:	fb 2d       	mov	r31, r11
     e08:	ff 77       	andi	r31, 0x7F	; 127
     e0a:	3f 2e       	mov	r3, r31
     e0c:	36 fe       	sbrs	r3, 6
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x2ca>
     e10:	23 2d       	mov	r18, r3
     e12:	2e 7f       	andi	r18, 0xFE	; 254
     e14:	a2 2e       	mov	r10, r18
     e16:	89 14       	cp	r8, r9
     e18:	58 f4       	brcc	.+22     	; 0xe30 <vfprintf+0x2d0>
     e1a:	34 fe       	sbrs	r3, 4
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <vfprintf+0x2d4>
     e1e:	32 fc       	sbrc	r3, 2
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <vfprintf+0x2d4>
     e22:	83 2d       	mov	r24, r3
     e24:	8e 7e       	andi	r24, 0xEE	; 238
     e26:	a8 2e       	mov	r10, r24
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x2d4>
     e2a:	b8 2c       	mov	r11, r8
     e2c:	a3 2c       	mov	r10, r3
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <vfprintf+0x2d6>
     e30:	b8 2c       	mov	r11, r8
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <vfprintf+0x2d6>
     e34:	b9 2c       	mov	r11, r9
     e36:	a4 fe       	sbrs	r10, 4
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <vfprintf+0x2f8>
     e3a:	fe 01       	movw	r30, r28
     e3c:	e8 0d       	add	r30, r8
     e3e:	f1 1d       	adc	r31, r1
     e40:	80 81       	ld	r24, Z
     e42:	80 33       	cpi	r24, 0x30	; 48
     e44:	21 f4       	brne	.+8      	; 0xe4e <vfprintf+0x2ee>
     e46:	9a 2d       	mov	r25, r10
     e48:	99 7e       	andi	r25, 0xE9	; 233
     e4a:	a9 2e       	mov	r10, r25
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <vfprintf+0x300>
     e4e:	a2 fe       	sbrs	r10, 2
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x2fe>
     e52:	b3 94       	inc	r11
     e54:	b3 94       	inc	r11
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <vfprintf+0x300>
     e58:	8a 2d       	mov	r24, r10
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	09 f0       	breq	.+2      	; 0xe60 <vfprintf+0x300>
     e5e:	b3 94       	inc	r11
     e60:	a3 fc       	sbrc	r10, 3
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <vfprintf+0x326>
     e64:	a0 fe       	sbrs	r10, 0
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0x314>
     e68:	b2 14       	cp	r11, r2
     e6a:	88 f4       	brcc	.+34     	; 0xe8e <vfprintf+0x32e>
     e6c:	28 0c       	add	r2, r8
     e6e:	92 2c       	mov	r9, r2
     e70:	9b 18       	sub	r9, r11
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <vfprintf+0x330>
     e74:	b2 14       	cp	r11, r2
     e76:	60 f4       	brcc	.+24     	; 0xe90 <vfprintf+0x330>
     e78:	b6 01       	movw	r22, r12
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     e82:	b3 94       	inc	r11
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <vfprintf+0x314>
     e86:	b2 14       	cp	r11, r2
     e88:	18 f4       	brcc	.+6      	; 0xe90 <vfprintf+0x330>
     e8a:	2b 18       	sub	r2, r11
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <vfprintf+0x332>
     e8e:	98 2c       	mov	r9, r8
     e90:	21 2c       	mov	r2, r1
     e92:	a4 fe       	sbrs	r10, 4
     e94:	10 c0       	rjmp	.+32     	; 0xeb6 <vfprintf+0x356>
     e96:	b6 01       	movw	r22, r12
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ea0:	a2 fe       	sbrs	r10, 2
     ea2:	17 c0       	rjmp	.+46     	; 0xed2 <vfprintf+0x372>
     ea4:	a1 fc       	sbrc	r10, 1
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x34e>
     ea8:	88 e7       	ldi	r24, 0x78	; 120
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x352>
     eae:	88 e5       	ldi	r24, 0x58	; 88
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	b6 01       	movw	r22, r12
     eb4:	0c c0       	rjmp	.+24     	; 0xece <vfprintf+0x36e>
     eb6:	8a 2d       	mov	r24, r10
     eb8:	86 78       	andi	r24, 0x86	; 134
     eba:	59 f0       	breq	.+22     	; 0xed2 <vfprintf+0x372>
     ebc:	a1 fe       	sbrs	r10, 1
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x364>
     ec0:	8b e2       	ldi	r24, 0x2B	; 43
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <vfprintf+0x366>
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	a7 fc       	sbrc	r10, 7
     ec8:	8d e2       	ldi	r24, 0x2D	; 45
     eca:	b6 01       	movw	r22, r12
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ed2:	89 14       	cp	r8, r9
     ed4:	38 f4       	brcc	.+14     	; 0xee4 <vfprintf+0x384>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e3       	ldi	r24, 0x30	; 48
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ee0:	9a 94       	dec	r9
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <vfprintf+0x372>
     ee4:	8a 94       	dec	r8
     ee6:	f3 01       	movw	r30, r6
     ee8:	e8 0d       	add	r30, r8
     eea:	f1 1d       	adc	r31, r1
     eec:	80 81       	ld	r24, Z
     eee:	b6 01       	movw	r22, r12
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ef6:	81 10       	cpse	r8, r1
     ef8:	f5 cf       	rjmp	.-22     	; 0xee4 <vfprintf+0x384>
     efa:	22 20       	and	r2, r2
     efc:	09 f4       	brne	.+2      	; 0xf00 <vfprintf+0x3a0>
     efe:	42 ce       	rjmp	.-892    	; 0xb84 <vfprintf+0x24>
     f00:	b6 01       	movw	r22, r12
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f0a:	2a 94       	dec	r2
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <vfprintf+0x39a>
     f0e:	f6 01       	movw	r30, r12
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	97 81       	ldd	r25, Z+7	; 0x07
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x3ba>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	2b 96       	adiw	r28, 0x0b	; 11
     f1c:	e2 e1       	ldi	r30, 0x12	; 18
     f1e:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__epilogue_restores__>

00000f22 <strnlen_P>:
     f22:	fc 01       	movw	r30, r24
     f24:	05 90       	lpm	r0, Z+
     f26:	61 50       	subi	r22, 0x01	; 1
     f28:	70 40       	sbci	r23, 0x00	; 0
     f2a:	01 10       	cpse	r0, r1
     f2c:	d8 f7       	brcc	.-10     	; 0xf24 <strnlen_P+0x2>
     f2e:	80 95       	com	r24
     f30:	90 95       	com	r25
     f32:	8e 0f       	add	r24, r30
     f34:	9f 1f       	adc	r25, r31
     f36:	08 95       	ret

00000f38 <strnlen>:
     f38:	fc 01       	movw	r30, r24
     f3a:	61 50       	subi	r22, 0x01	; 1
     f3c:	70 40       	sbci	r23, 0x00	; 0
     f3e:	01 90       	ld	r0, Z+
     f40:	01 10       	cpse	r0, r1
     f42:	d8 f7       	brcc	.-10     	; 0xf3a <strnlen+0x2>
     f44:	80 95       	com	r24
     f46:	90 95       	com	r25
     f48:	8e 0f       	add	r24, r30
     f4a:	9f 1f       	adc	r25, r31
     f4c:	08 95       	ret

00000f4e <strrev>:
     f4e:	dc 01       	movw	r26, r24
     f50:	fc 01       	movw	r30, r24
     f52:	67 2f       	mov	r22, r23
     f54:	71 91       	ld	r23, Z+
     f56:	77 23       	and	r23, r23
     f58:	e1 f7       	brne	.-8      	; 0xf52 <strrev+0x4>
     f5a:	32 97       	sbiw	r30, 0x02	; 2
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <strrev+0x18>
     f5e:	7c 91       	ld	r23, X
     f60:	6d 93       	st	X+, r22
     f62:	70 83       	st	Z, r23
     f64:	62 91       	ld	r22, -Z
     f66:	ae 17       	cp	r26, r30
     f68:	bf 07       	cpc	r27, r31
     f6a:	c8 f3       	brcs	.-14     	; 0xf5e <strrev+0x10>
     f6c:	08 95       	ret

00000f6e <fputc>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	fb 01       	movw	r30, r22
     f78:	23 81       	ldd	r18, Z+3	; 0x03
     f7a:	21 fd       	sbrc	r18, 1
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <fputc+0x16>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	2c c0       	rjmp	.+88     	; 0xfdc <fputc+0x6e>
     f84:	22 ff       	sbrs	r18, 2
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <fputc+0x46>
     f88:	46 81       	ldd	r20, Z+6	; 0x06
     f8a:	57 81       	ldd	r21, Z+7	; 0x07
     f8c:	24 81       	ldd	r18, Z+4	; 0x04
     f8e:	35 81       	ldd	r19, Z+5	; 0x05
     f90:	42 17       	cp	r20, r18
     f92:	53 07       	cpc	r21, r19
     f94:	44 f4       	brge	.+16     	; 0xfa6 <fputc+0x38>
     f96:	a0 81       	ld	r26, Z
     f98:	b1 81       	ldd	r27, Z+1	; 0x01
     f9a:	9d 01       	movw	r18, r26
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	31 83       	std	Z+1, r19	; 0x01
     fa2:	20 83       	st	Z, r18
     fa4:	8c 93       	st	X, r24
     fa6:	26 81       	ldd	r18, Z+6	; 0x06
     fa8:	37 81       	ldd	r19, Z+7	; 0x07
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	37 83       	std	Z+7, r19	; 0x07
     fb0:	26 83       	std	Z+6, r18	; 0x06
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <fputc+0x6e>
     fb4:	8b 01       	movw	r16, r22
     fb6:	ec 01       	movw	r28, r24
     fb8:	fb 01       	movw	r30, r22
     fba:	00 84       	ldd	r0, Z+8	; 0x08
     fbc:	f1 85       	ldd	r31, Z+9	; 0x09
     fbe:	e0 2d       	mov	r30, r0
     fc0:	09 95       	icall
     fc2:	89 2b       	or	r24, r25
     fc4:	e1 f6       	brne	.-72     	; 0xf7e <fputc+0x10>
     fc6:	d8 01       	movw	r26, r16
     fc8:	16 96       	adiw	r26, 0x06	; 6
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	17 97       	sbiw	r26, 0x07	; 7
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	17 96       	adiw	r26, 0x07	; 7
     fd4:	9c 93       	st	X, r25
     fd6:	8e 93       	st	-X, r24
     fd8:	16 97       	sbiw	r26, 0x06	; 6
     fda:	ce 01       	movw	r24, r28
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <__ultoa_invert>:
     fe6:	fa 01       	movw	r30, r20
     fe8:	aa 27       	eor	r26, r26
     fea:	28 30       	cpi	r18, 0x08	; 8
     fec:	51 f1       	breq	.+84     	; 0x1042 <__ultoa_invert+0x5c>
     fee:	20 31       	cpi	r18, 0x10	; 16
     ff0:	81 f1       	breq	.+96     	; 0x1052 <__ultoa_invert+0x6c>
     ff2:	e8 94       	clt
     ff4:	6f 93       	push	r22
     ff6:	6e 7f       	andi	r22, 0xFE	; 254
     ff8:	6e 5f       	subi	r22, 0xFE	; 254
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	af 4f       	sbci	r26, 0xFF	; 255
    1002:	b1 e0       	ldi	r27, 0x01	; 1
    1004:	3e d0       	rcall	.+124    	; 0x1082 <__ultoa_invert+0x9c>
    1006:	b4 e0       	ldi	r27, 0x04	; 4
    1008:	3c d0       	rcall	.+120    	; 0x1082 <__ultoa_invert+0x9c>
    100a:	67 0f       	add	r22, r23
    100c:	78 1f       	adc	r23, r24
    100e:	89 1f       	adc	r24, r25
    1010:	9a 1f       	adc	r25, r26
    1012:	a1 1d       	adc	r26, r1
    1014:	68 0f       	add	r22, r24
    1016:	79 1f       	adc	r23, r25
    1018:	8a 1f       	adc	r24, r26
    101a:	91 1d       	adc	r25, r1
    101c:	a1 1d       	adc	r26, r1
    101e:	6a 0f       	add	r22, r26
    1020:	71 1d       	adc	r23, r1
    1022:	81 1d       	adc	r24, r1
    1024:	91 1d       	adc	r25, r1
    1026:	a1 1d       	adc	r26, r1
    1028:	20 d0       	rcall	.+64     	; 0x106a <__ultoa_invert+0x84>
    102a:	09 f4       	brne	.+2      	; 0x102e <__ultoa_invert+0x48>
    102c:	68 94       	set
    102e:	3f 91       	pop	r19
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	26 9f       	mul	r18, r22
    1034:	11 24       	eor	r1, r1
    1036:	30 19       	sub	r19, r0
    1038:	30 5d       	subi	r19, 0xD0	; 208
    103a:	31 93       	st	Z+, r19
    103c:	de f6       	brtc	.-74     	; 0xff4 <__ultoa_invert+0xe>
    103e:	cf 01       	movw	r24, r30
    1040:	08 95       	ret
    1042:	46 2f       	mov	r20, r22
    1044:	47 70       	andi	r20, 0x07	; 7
    1046:	40 5d       	subi	r20, 0xD0	; 208
    1048:	41 93       	st	Z+, r20
    104a:	b3 e0       	ldi	r27, 0x03	; 3
    104c:	0f d0       	rcall	.+30     	; 0x106c <__ultoa_invert+0x86>
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__ultoa_invert+0x5c>
    1050:	f6 cf       	rjmp	.-20     	; 0x103e <__ultoa_invert+0x58>
    1052:	46 2f       	mov	r20, r22
    1054:	4f 70       	andi	r20, 0x0F	; 15
    1056:	40 5d       	subi	r20, 0xD0	; 208
    1058:	4a 33       	cpi	r20, 0x3A	; 58
    105a:	18 f0       	brcs	.+6      	; 0x1062 <__ultoa_invert+0x7c>
    105c:	49 5d       	subi	r20, 0xD9	; 217
    105e:	31 fd       	sbrc	r19, 1
    1060:	40 52       	subi	r20, 0x20	; 32
    1062:	41 93       	st	Z+, r20
    1064:	02 d0       	rcall	.+4      	; 0x106a <__ultoa_invert+0x84>
    1066:	a9 f7       	brne	.-22     	; 0x1052 <__ultoa_invert+0x6c>
    1068:	ea cf       	rjmp	.-44     	; 0x103e <__ultoa_invert+0x58>
    106a:	b4 e0       	ldi	r27, 0x04	; 4
    106c:	a6 95       	lsr	r26
    106e:	97 95       	ror	r25
    1070:	87 95       	ror	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	ba 95       	dec	r27
    1078:	c9 f7       	brne	.-14     	; 0x106c <__ultoa_invert+0x86>
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	61 05       	cpc	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	08 95       	ret
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	0a 2e       	mov	r0, r26
    1088:	06 94       	lsr	r0
    108a:	57 95       	ror	r21
    108c:	47 95       	ror	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	ba 95       	dec	r27
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__ultoa_invert+0xa2>
    1096:	62 0f       	add	r22, r18
    1098:	73 1f       	adc	r23, r19
    109a:	84 1f       	adc	r24, r20
    109c:	95 1f       	adc	r25, r21
    109e:	a0 1d       	adc	r26, r0
    10a0:	08 95       	ret

000010a2 <__divmodsi4>:
    10a2:	05 2e       	mov	r0, r21
    10a4:	97 fb       	bst	r25, 7
    10a6:	1e f4       	brtc	.+6      	; 0x10ae <__divmodsi4+0xc>
    10a8:	00 94       	com	r0
    10aa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__negsi2>
    10ae:	57 fd       	sbrc	r21, 7
    10b0:	07 d0       	rcall	.+14     	; 0x10c0 <__divmodsi4_neg2>
    10b2:	0e 94 ba 08 	call	0x1174	; 0x1174 <__udivmodsi4>
    10b6:	07 fc       	sbrc	r0, 7
    10b8:	03 d0       	rcall	.+6      	; 0x10c0 <__divmodsi4_neg2>
    10ba:	4e f4       	brtc	.+18     	; 0x10ce <__divmodsi4_exit>
    10bc:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__negsi2>

000010c0 <__divmodsi4_neg2>:
    10c0:	50 95       	com	r21
    10c2:	40 95       	com	r20
    10c4:	30 95       	com	r19
    10c6:	21 95       	neg	r18
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	4f 4f       	sbci	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255

000010ce <__divmodsi4_exit>:
    10ce:	08 95       	ret

000010d0 <__negsi2>:
    10d0:	90 95       	com	r25
    10d2:	80 95       	com	r24
    10d4:	70 95       	com	r23
    10d6:	61 95       	neg	r22
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	08 95       	ret

000010e0 <__muluhisi3>:
    10e0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__umulhisi3>
    10e4:	a5 9f       	mul	r26, r21
    10e6:	90 0d       	add	r25, r0
    10e8:	b4 9f       	mul	r27, r20
    10ea:	90 0d       	add	r25, r0
    10ec:	a4 9f       	mul	r26, r20
    10ee:	80 0d       	add	r24, r0
    10f0:	91 1d       	adc	r25, r1
    10f2:	11 24       	eor	r1, r1
    10f4:	08 95       	ret

000010f6 <__mulshisi3>:
    10f6:	b7 ff       	sbrs	r27, 7
    10f8:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__muluhisi3>

000010fc <__mulohisi3>:
    10fc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__muluhisi3>
    1100:	82 1b       	sub	r24, r18
    1102:	93 0b       	sbc	r25, r19
    1104:	08 95       	ret

00001106 <__prologue_saves__>:
    1106:	2f 92       	push	r2
    1108:	3f 92       	push	r3
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	ca 1b       	sub	r28, r26
    1130:	db 0b       	sbc	r29, r27
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	09 94       	ijmp

0000113e <__epilogue_restores__>:
    113e:	2a 88       	ldd	r2, Y+18	; 0x12
    1140:	39 88       	ldd	r3, Y+17	; 0x11
    1142:	48 88       	ldd	r4, Y+16	; 0x10
    1144:	5f 84       	ldd	r5, Y+15	; 0x0f
    1146:	6e 84       	ldd	r6, Y+14	; 0x0e
    1148:	7d 84       	ldd	r7, Y+13	; 0x0d
    114a:	8c 84       	ldd	r8, Y+12	; 0x0c
    114c:	9b 84       	ldd	r9, Y+11	; 0x0b
    114e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1150:	b9 84       	ldd	r11, Y+9	; 0x09
    1152:	c8 84       	ldd	r12, Y+8	; 0x08
    1154:	df 80       	ldd	r13, Y+7	; 0x07
    1156:	ee 80       	ldd	r14, Y+6	; 0x06
    1158:	fd 80       	ldd	r15, Y+5	; 0x05
    115a:	0c 81       	ldd	r16, Y+4	; 0x04
    115c:	1b 81       	ldd	r17, Y+3	; 0x03
    115e:	aa 81       	ldd	r26, Y+2	; 0x02
    1160:	b9 81       	ldd	r27, Y+1	; 0x01
    1162:	ce 0f       	add	r28, r30
    1164:	d1 1d       	adc	r29, r1
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	ed 01       	movw	r28, r26
    1172:	08 95       	ret

00001174 <__udivmodsi4>:
    1174:	a1 e2       	ldi	r26, 0x21	; 33
    1176:	1a 2e       	mov	r1, r26
    1178:	aa 1b       	sub	r26, r26
    117a:	bb 1b       	sub	r27, r27
    117c:	fd 01       	movw	r30, r26
    117e:	0d c0       	rjmp	.+26     	; 0x119a <__udivmodsi4_ep>

00001180 <__udivmodsi4_loop>:
    1180:	aa 1f       	adc	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	ee 1f       	adc	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	a2 17       	cp	r26, r18
    118a:	b3 07       	cpc	r27, r19
    118c:	e4 07       	cpc	r30, r20
    118e:	f5 07       	cpc	r31, r21
    1190:	20 f0       	brcs	.+8      	; 0x119a <__udivmodsi4_ep>
    1192:	a2 1b       	sub	r26, r18
    1194:	b3 0b       	sbc	r27, r19
    1196:	e4 0b       	sbc	r30, r20
    1198:	f5 0b       	sbc	r31, r21

0000119a <__udivmodsi4_ep>:
    119a:	66 1f       	adc	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	1a 94       	dec	r1
    11a4:	69 f7       	brne	.-38     	; 0x1180 <__udivmodsi4_loop>
    11a6:	60 95       	com	r22
    11a8:	70 95       	com	r23
    11aa:	80 95       	com	r24
    11ac:	90 95       	com	r25
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	bd 01       	movw	r22, r26
    11b4:	cf 01       	movw	r24, r30
    11b6:	08 95       	ret

000011b8 <__umulhisi3>:
    11b8:	a2 9f       	mul	r26, r18
    11ba:	b0 01       	movw	r22, r0
    11bc:	b3 9f       	mul	r27, r19
    11be:	c0 01       	movw	r24, r0
    11c0:	a3 9f       	mul	r26, r19
    11c2:	70 0d       	add	r23, r0
    11c4:	81 1d       	adc	r24, r1
    11c6:	11 24       	eor	r1, r1
    11c8:	91 1d       	adc	r25, r1
    11ca:	b2 9f       	mul	r27, r18
    11cc:	70 0d       	add	r23, r0
    11ce:	81 1d       	adc	r24, r1
    11d0:	11 24       	eor	r1, r1
    11d2:	91 1d       	adc	r25, r1
    11d4:	08 95       	ret

000011d6 <_exit>:
    11d6:	f8 94       	cli

000011d8 <__stop_program>:
    11d8:	ff cf       	rjmp	.-2      	; 0x11d8 <__stop_program>
